#!/bin/sh

echo "======================================================"
echo ">>>>>>>>>>>>>>>> PARSEARGS TESTS <<<<<<<<<<<<<<<<<<<<<"
echo "======================================================"

EXEC_DIR=`realpath $(dirname "$0")` || {
   echo "No realpath; falling back to setting EXEC_DIR with cd dirname \"\$0\" && pwd -P."
   EXEC_DIR=$(cd $(dirname "$0") && pwd -P)
}

WORK_DIR=`realpath "${EXEC_DIR}/.."` || {
   echo "No realpath; falling back to setting WORK_DIR with cd \"\${EXEC_DIR}/..\" && pwd -P."
   WORK_DIR=$(cd "${EXEC_DIR}/.." && pwd -P)
}

BUILD_DIR="${WORK_DIR}/build"
SHARED_DIR="${WORK_DIR}/shared"

PATH=${PATH}:${SHARED_DIR}:${EXEC_DIR}
. parseargs
. sh-test

# Check we can 'include' parseargs more than once safely
. parseargs

parsearg_functions_complain_if_parameter_not_a_parseargs_parser(){
  local dict="$(dict_declare_simple)"
  local returned_error=""
  returned_error="$(parseargs_add_argument "not a parser" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_add_argument "${dict}" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "not a parser" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "${dict}" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
}

make_arg_parser_with_positional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_and_short_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  parser="$(parseargs_add_argument "${parser}" "short" "p" destination "prefix")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "suffix")"
  local arguments="$(parseargs_parse_arguments "${parser}" FROM "-s" "EPILOGUE" TO "-p" "PRELUDE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  CHECK "$(dict_get "${arguments}" "suffix")" = "EPILOGUE"
  CHECK "$(dict_get "${arguments}" "prefix")" = "PRELUDE"
}

argument_cannot_be_both_positional_and_optional() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false

  # errors exit and we lose the usual returned parser value
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "short" "o" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "o" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "long" "optional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "long" "optional" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
}

argument_needs_name_or_long_and_or_short_attribute() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "default" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  returned_error="$(parseargs_add_argument "${parser}" "destination" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "name" "long"
}

short_option_must_be_single_character() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "destination" "x")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "XX" "destination" "x" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "single"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "long" "eggs")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "X" "destination" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "long" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "long" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

argument_attributes_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" "name" "X" "name" "Y" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "name" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "X" "short" "Y" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "long" "eggs" "long" "why" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "long" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  

# add other attributes as support is added...
}

extra_positional_arguments_ignored_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" "EXTRA" 2>/dev/null)"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

too_few_positional_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  returned_error="$(parseargs_parse_arguments "${parser}" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "few" "positional"
}

#set -x
TEST parsearg_functions_complain_if_parameter_not_a_parseargs_parser
TEST make_arg_parser_with_positional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_some_arguments
TEST argument_cannot_be_both_positional_and_optional
TEST argument_needs_name_or_long_and_or_short_attribute
TEST short_option_must_be_single_character
TEST options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace
TEST argument_attributes_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST extra_positional_arguments_ignored_when_parsed
TEST too_few_positional_arguments_is_an_error_when_parsed
TEST make_arg_parser_with_positional_and_short_optional_arguments_and_parse_some_arguments
PRINT_TEST_COUNTS
