#!/bin/sh

echo "======================================================"
echo ">>>>>>>>>>>>>>>> PARSEARGS TESTS <<<<<<<<<<<<<<<<<<<<<"
echo "======================================================"

EXEC_DIR=`realpath $(dirname "$0")` || {
   echo "No realpath; falling back to setting EXEC_DIR with cd dirname \"\$0\" && pwd -P."
   EXEC_DIR=$(cd $(dirname "$0") && pwd -P)
}

WORK_DIR=`realpath "${EXEC_DIR}/.."` || {
   echo "No realpath; falling back to setting WORK_DIR with cd \"\${EXEC_DIR}/..\" && pwd -P."
   WORK_DIR=$(cd "${EXEC_DIR}/.." && pwd -P)
}

BUILD_DIR="${WORK_DIR}/build"
SHARED_DIR="${WORK_DIR}/shared"

PATH=${PATH}:${SHARED_DIR}:${EXEC_DIR}
. parseargs
. sh-test

# Check we can 'include' parseargs more than once safely
. parseargs

parsearg_functions_complain_if_parameter_not_a_parseargs_parser(){
  local dict="$(dict_declare_simple)"
  local returned_error=""
  local is_parser=true
  local string_is_not_a_parser="not a parser"
  is_parser="parseargs_is_argument_parser  ${string_is_not_a_parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"
  is_parser=true
  is_parser="parseargs_is_argument_parser  ${dict}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"

  returned_error="$(parseargs_add_argument "${string_is_not_a_parser}" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_add_argument "${dict}" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "${string_is_not_a_parser}" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "${dict}" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
}

make_arg_parser_with_positional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_multi_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2" )"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "LEFT" "RIGHT" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_and_parse_some_arguments_no_space() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-sFROM" "-tTO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_arguments_and_parse_some_arguments_after_equals() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source=FR=O=M" "--target=TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FR=O=M"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_and_short_and_long_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  parser="$(parseargs_add_argument "${parser}" "short" "p" destination "prefix")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "suffix")"
  parser="$(parseargs_add_argument "${parser}" "long" "action")"
  local arguments="$(parseargs_parse_arguments "${parser}" FROM "-sEPILOGUE" TO "--action" "COPY" "-p" "PRELUDE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  CHECK "$(dict_get "${arguments}" "suffix")" = "EPILOGUE"
  CHECK "$(dict_get "${arguments}" "prefix")" = "PRELUDE"
  CHECK "$(dict_get "${arguments}" "action")" = "COPY"
}

make_arg_parser_with_optional_arguments_with_defaults_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "default" "FROM")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "default" "TO")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_required_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "required" "true")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "required" "true")"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "--target" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "-s" "equired"

  returned_error="$(parseargs_parse_arguments "${parser}" "-s" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "--target" "equired"
}

argument_nargs_attribute_can_be_in_range_integer() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "1")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "${__PARSEARGS_MAX_NARGS__}")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
}

argument_nargs_attribute_can_be_single_glob_character() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "?")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "*")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "+")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
}

argument_nargs_attribute_cannot_be_out_of_range_integer() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  local returned_error=""
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "0" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "$(( ${__PARSEARGS_MAX_NARGS__}+1 ))" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
}

argument_nargs_attribute_cannot_be_non_glob_non_interger_value() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  local returned_error=""
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "three" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "-1" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "3.14" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "??" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "**" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "++" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "?*+" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
}

argument_cannot_be_both_positional_and_optional() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false

  # errors exit and we lose the usual returned parser value
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "short" "o" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "o" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "long" "optional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "long" "optional" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
}

argument_needs_name_or_long_and_or_short_attribute() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "default" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  returned_error="$(parseargs_add_argument "${parser}" "destination" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "name" "long"
}

short_option_must_be_single_character() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "destination" "x")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "XX" "destination" "x" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "single"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "long" "eggs")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "X" "destination" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "long" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "long" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

argument_attributes_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" "name" "X" "name" "Y" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "name" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "X" "short" "Y" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "long" "eggs" "long" "why" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "long" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  

# add other attributes as support is added...
}

extra_positional_arguments_ignored_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" "EXTRA" 2>/dev/null)"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

too_few_positional_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  returned_error="$(parseargs_parse_arguments "${parser}" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "few" "positional"
}

unknown_short_option_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "-sFROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nknown" "option"
}

unknown_long_option_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "-source" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nknown" "option"
}

argument_values_starting_with_hyphens_must_be_preceded_by_the_argument_separator() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "o" "long" "option")"
  parser="$(parseargs_add_argument "${parser}" "short" "f" "long" "following")"
  parser="$(parseargs_add_argument "${parser}" "name" "positional")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-o" "--" "--following" \
                                                           "--" "--positional--" \
                                                           "--following" -- "-o")"
  CHECK $? -eq 0
  CHECK "$(dict_get "${arguments}" "option")" = "--following"
  CHECK "$(dict_get "${arguments}" "following")" = "-o"
  CHECK "$(dict_get "${arguments}" "positional")" = "--positional--"
}

missing_short_option_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "short" "o" "destination" "argument")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
#
# Arguments starting with hyphens are not allowed unless preceded by 
# -- , the argument separator
#
  parser="$(parseargs_add_argument "${parser}" "short" "f" "destination" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "-f" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

missing_long_option_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "long" "option")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
#
# Arguments starting with hyphens are not allowed unless preceded by 
# -- , the argument separator
#
  parser="$(parseargs_add_argument "${parser}" "long" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "--following" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

#set -x
TEST parsearg_functions_complain_if_parameter_not_a_parseargs_parser
TEST make_arg_parser_with_positional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_some_arguments_no_space
TEST make_arg_parser_with_long_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_arguments_and_parse_some_arguments_after_equals
TEST make_arg_parser_with_positional_and_short_and_long_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_optional_arguments_with_defaults_and_parse_some_arguments
TEST make_arg_parser_with_required_optional_arguments_and_parse_some_arguments
TEST argument_nargs_attribute_can_be_in_range_integer
TEST argument_nargs_attribute_can_be_single_glob_character
TEST argument_nargs_attribute_cannot_be_out_of_range_integer
TEST argument_nargs_attribute_cannot_be_non_glob_non_interger_value
TEST argument_cannot_be_both_positional_and_optional
TEST argument_needs_name_or_long_and_or_short_attribute
TEST short_option_must_be_single_character
TEST options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace
TEST argument_attributes_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST extra_positional_arguments_ignored_when_parsed
TEST too_few_positional_arguments_is_an_error_when_parsed
TEST unknown_short_option_is_an_error_when_parsed
TEST unknown_long_option_is_an_error_when_parsed
TEST argument_values_starting_with_hyphens_must_be_preceded_by_the_argument_separator
TEST missing_short_option_argument_is_an_error_when_parsed
TEST missing_long_option_argument_is_an_error_when_parsed
PRINT_TEST_COUNTS
