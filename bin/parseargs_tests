#!/bin/sh

echo "======================================================"
echo ">>>>>>>>>>>>>>>> PARSEARGS TESTS <<<<<<<<<<<<<<<<<<<<<"
echo "======================================================"

EXEC_DIR=`realpath $(dirname "$0")` || {
   echo "No realpath; falling back to setting EXEC_DIR with cd dirname \"\$0\" && pwd -P."
   EXEC_DIR=$(cd $(dirname "$0") && pwd -P)
}

WORK_DIR=`realpath "${EXEC_DIR}/.."` || {
   echo "No realpath; falling back to setting WORK_DIR with cd \"\${EXEC_DIR}/..\" && pwd -P."
   WORK_DIR=$(cd "${EXEC_DIR}/.." && pwd -P)
}

BUILD_DIR="${WORK_DIR}/build"
SHARED_DIR="${WORK_DIR}/shared"

PATH=${PATH}:${SHARED_DIR}:${EXEC_DIR}
. parseargs
. sh-test

# Check we can 'include' parseargs more than once safely
. parseargs

parsearg_functions_complain_if_parameter_not_a_parseargs_parser(){
  local dict="$(dict_declare_simple)"
  local returned_error=""
  local is_parser=true
  local string_is_not_a_parser="not a parser"
  is_parser="parseargs_is_argument_parser  ${string_is_not_a_parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"
  is_parser=true
  is_parser="parseargs_is_argument_parser  ${dict}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"

  returned_error="$(parseargs_add_argument "${string_is_not_a_parser}" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_add_argument "${dict}" "name" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "${string_is_not_a_parser}" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
  returned_error="$(parseargs_parse_arguments "${dict}" "FROM" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "irst" "argument" "parser"
}

requesting_a_new_parser_returns_a_valid_parser() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  CHECK "${is_parser}"
}

make_arg_parser_with_positional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_arguments_and_explicit_action_store_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source" "action" "store")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "action" "store")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_arguments_from_choices_set_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "FROM" "_" "TO" "_")"
  parser="$(parseargs_add_argument "${parser}" "name" "source" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_multi_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2" )"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "LEFT" "RIGHT" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_multi_arguments_from_choices_set_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "LEFT" "_" "TO" "_" "RIGHT" "_")"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "LEFT" "RIGHT" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_multi_argument_of_1_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source" "nargs" "1" )"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_positional_multi_0_or_1_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "?" "default" "VOIDSPACE")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "FROM")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "VOIDSPACE"
}

make_arg_parser_with_default_and_positional_multi_0_or_1_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser "argument_default" "VOIDSPACE")"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "?" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "FROM")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "VOIDSPACE"
}

make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "*")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "HERE" "TO" "THERE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  local target="$(dict_get "${arguments}" "target")"
  CHECK "$(dict_size "${target}")" = "3"
  CHECK "$(dict_get "${target}" "0")" = "HERE"
  CHECK "$(dict_get "${target}" "1")" = "TO"
  CHECK "$(dict_get "${target}" "2")" = "THERE"
}

make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "*")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  local target="$(dict_get "${arguments}" "target")"
  CHECK "$(dict_size "${target}")" = "1"
  CHECK "$(dict_get "${target}" "0")" = "TO"
}

make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "*")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  local target="$(dict_get "${arguments}" "target")"
  CHECK "$(dict_size "${target}")" = "0"
}

make_arg_parser_with_positional_multi_1_or_many_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "+")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "HERE" "TO" "THERE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  local target="$(dict_get "${arguments}" "target")"
  CHECK "$(dict_size "${target}")" = "3"
  CHECK "$(dict_get "${target}" "0")" = "HERE"
  CHECK "$(dict_get "${target}" "1")" = "TO"
  CHECK "$(dict_get "${target}" "2")" = "THERE"
}

make_arg_parser_with_positional_multi_1_or_many_arguments_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "+")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  local target="$(dict_get "${arguments}" "target")"
  CHECK "$(dict_size "${target}")" = "1"
  CHECK "$(dict_get "${target}" "0")" = "TO"
}

parse_no_arguments_for_parser_with_positional_multi_1_or_many_arguments_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target" "nargs" "+")"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

make_arg_parser_with_positional_sub_commands_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "command" 'action' 'sub_command' )"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "source")"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "copy" "FROM" "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"

  arguments="$(parseargs_parse_arguments "${parser}" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_positional_sub_commands_and_alias_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del' 'remove' 'rm')"
  local arguments="$(parseargs_parse_arguments "${parser}" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" "del" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" "remove" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" "rm" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_short_optional_arguments_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_and_explicit_action_store_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source" "action" "store")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target" "action" "store")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_with_action_append_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "sources" "action" "append")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "targets" "action" "append")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" "-s" "HERE" "-t" "THERE")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "FROM"
  CHECK "$(dict_get "${sources}" "1")" = "HERE"
  local targets="$(dict_get "${arguments}" "targets")"
  CHECK "$(dict_size "${targets}")" = "2"
  CHECK "$(dict_get "${targets}" "0")" = "TO"
  CHECK "$(dict_get "${targets}" "1")" = "THERE"
}

make_arg_parser_with_short_optional_arguments_with_action_extend_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "sources" "action" "extend")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "targets" "action" "extend")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" "-s" "HERE" "-t" "THERE")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "FROM"
  CHECK "$(dict_get "${sources}" "1")" = "HERE"
  local targets="$(dict_get "${arguments}" "targets")"
  CHECK "$(dict_size "${targets}")" = "2"
  CHECK "$(dict_get "${targets}" "0")" = "TO"
  CHECK "$(dict_get "${targets}" "1")" = "THERE"
}

make_arg_parser_with_short_optional_version_action_with_version_text_and_parse_version_flag_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "v" "action" "version" "version" 'VERSION TEXT' )"
  arguments="$(parseargs_parse_arguments "${parser}" '-v')"
  if dict_is_dict "${arguments}"; then
    local arguments_is_dict=true
  else
    local arguments_is_dict=false
  fi
  CHECK_FALSE ${arguments_is_dict}
  CHECK_CONTAINS_ALL "${arguments}" 'VERSION' 'TEXT'
}

make_arg_parser_with_short_optional_arguments_from_choices_set_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "FROM" "_" "TO" "_")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-t" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = ""
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
   arguments="$(parseargs_parse_arguments "${parser}" "-s" "FROM" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = ""
}

make_arg_parser_with_short_optional_arguments_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "source")" = ""
  CHECK "$(dict_get "${arguments}" "target")" = ""
}

make_arg_parser_with_short_optional_arguments_and_parse_some_arguments_no_space() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-sFROM" "-tTO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_flags_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_true")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_false")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-y" "-n" )"
  CHECK "$(dict_get "${arguments}" "yes")"
  CHECK_FALSE "$(dict_get "${arguments}" "no")" 
  arguments="$(parseargs_parse_arguments "${parser}" "-n" "-y" )"
  CHECK "$(dict_get "${arguments}" "yes")"
  CHECK_FALSE "$(dict_get "${arguments}" "no")" 
}

make_arg_parser_with_short_optional_flags_and_parse_all_arguments_grouped() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_true")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_false")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  arguments="$(parseargs_parse_arguments "${parser}" "-yn" )"
  CHECK "$(dict_get "${arguments}" "yes")"
  CHECK_FALSE "$(dict_get "${arguments}" "no")" 
}

make_arg_parser_with_short_optional_flags_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_true")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_false")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK_FALSE "$(dict_get "${arguments}" "yes")" 
  CHECK "$(dict_get "${arguments}" "no")"

}

make_arg_parser_with_short_optional_const_flags_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-y" "-n" )"
  CHECK "$(dict_get "${arguments}" "yes")" = "yes"
  CHECK "$(dict_get "${arguments}" "no")" = "no"
  arguments="$(parseargs_parse_arguments "${parser}" "-n" "-y" )"
  CHECK "$(dict_get "${arguments}" "yes")" = "yes"
  CHECK "$(dict_get "${arguments}" "no")" = "no"
}

make_arg_parser_with_short_optional_const_flags_and_parse_all_arguments_grouped() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  arguments="$(parseargs_parse_arguments "${parser}" "-yn" )"
  CHECK "$(dict_get "${arguments}" "yes")" = "yes"
  CHECK "$(dict_get "${arguments}" "no")" = "no"
}

make_arg_parser_with_short_optional_const_flags_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "yes" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "no" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK -z "$(dict_get "${arguments}" "yes")" 
  CHECK -z "$(dict_get "${arguments}" "no")"
}

make_arg_parser_with_short_optional_const_flags_same_dest_and_parse_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "answer" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "answer" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-y" )"
  CHECK "$(dict_get "${arguments}" "answer")" = "yes"
  arguments="$(parseargs_parse_arguments "${parser}" "-n")"
  CHECK "$(dict_get "${arguments}" "answer")" = "no"
}

make_arg_parser_with_short_optional_const_flags_same_dest_with_append_const_action_and_parse_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "y" destination "answer" "action" "append_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "short" "n" "destination" "answer" "action" "append_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-y" )"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "1"
  CHECK "$(dict_get "${answer}" "0")" = "yes"

  arguments="$(parseargs_parse_arguments "${parser}" "-n")"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "1"
  CHECK "$(dict_get "${answer}" "0")" = "no"

  local arguments="$(parseargs_parse_arguments "${parser}" "-y" "-n" )"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "2"
  CHECK "$(dict_get "${answer}" "0")" = "yes"
  CHECK "$(dict_get "${answer}" "1")" = "no"
}

make_arg_parser_with_short_optional_flag_count_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "c" destination "count" "action" "count")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-c" )"
  CHECK "$(dict_get "${arguments}" "count")" = '1'
  arguments="$(parseargs_parse_arguments "${parser}" "-c" "-c" )"
  CHECK "$(dict_get "${arguments}" "count")" = '2'
}

make_arg_parser_with_short_optional_flag_count_and_parse_all_arguments_grouped() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "c" destination "count" "action" "count")"
  arguments="$(parseargs_parse_arguments "${parser}" "-ccc" )"
  CHECK "$(dict_get "${arguments}" "count")" = '3'
}

make_arg_parser_with_short_optional_flag_count_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "c" destination "count" "action" "count")"
  arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK -z "$(dict_get "${arguments}" "count")"
}

make_arg_parser_with_short_optional_flag_count_with_default_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "c" destination "count" "action" "count" "default" '0' )"
  arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "count")" = '0'
}

make_arg_parser_with_default_and_short_optional_flag_count_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser "argument_default" '0')"
  parser="$(parseargs_add_argument "${parser}" "short" "c" destination "count" "action" "count"  )"
  arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "count")" = '0'
}

make_arg_parser_with_short_optional_multi_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "LEFT" "RIGHT" "-t" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_arguments_from_choices_set_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "LEFT" "_" "TO" "_" "RIGHT" "_")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "sources" "nargs" "2" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-s" "LEFT" "RIGHT" "-t" "TO")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_arguments_and_parse_some_arguments_no_space() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" destination "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-sLEFT" "RIGHT" "-tTO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_argument_of_1_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "1" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s"FROM" -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_0_or_1_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "?" "const" "VOIDSPACE")"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -t"TO" -s"FROM" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" -s -t"TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "VOIDSPACE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" -t"TO" -s )"
  CHECK "$(dict_get "${arguments}" "source")" = "VOIDSPACE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s"GO" "FROM" "HERE" -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s"FROM" -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "0"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_1_or_many_argument_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s"GO" "FROM" "HERE" -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_short_optional_multi_1_or_many_argument_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s"FROM" -t"TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

parse_no_arguments_for_parser_with_short_optional_multi_1_or_many_arguments_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "short" "t" "destination" "target")"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" -s -t"TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

make_arg_parser_with_short_optional_multi_0_or_many_argument_with_append_action_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "sources" "nargs" "*" "action" "append")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s -s"GO" "FROM" "HERE" -s"TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "3"
  local source="$(dict_get "${sources}" "0")"
  CHECK "$(dict_size "${source}")" = "0"

  source="$(dict_get "${sources}" "1")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"

  source="$(dict_get "${sources}" "2")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "TO"
}

make_arg_parser_with_short_optional_multi_0_or_many_argument_with_extend_action_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "sources" "nargs" "*" "action" "extend")"
  local arguments="$(parseargs_parse_arguments "${parser}" -s -s"GO" "FROM" "HERE" -s"TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "4"

  CHECK "$(dict_get "${sources}" "0")" = "GO"
  CHECK "$(dict_get "${sources}" "1")" = "FROM"
  CHECK "$(dict_get "${sources}" "2")" = "HERE"
  CHECK "$(dict_get "${sources}" "3")" = "TO"
}

make_arg_parser_with_short_optional_sub_commands_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_command' )"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "source")"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "-c" "copy" "FROM" "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "-c" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_short_optional_sub_commands_and_alias_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del' 'remove' 'rm')"
  local arguments="$(parseargs_parse_arguments "${parser}" '-c' "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "del" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "remove" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "rm" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_short_optional_sub_command_with_default_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_command' )"
  local countcmdparser="$(parseargs_new_argument_parser)"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "short" "c" destination "count" "action" "count" "default" '0' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "-c" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "count")" = "0"
}

make_arg_parser_with_short_optional_sub_command_with_argument_default_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_command' )"
  local countcmdparser="$(parseargs_new_argument_parser "argument_default" '0')"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "short" "c" destination "count" "action" "count" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "-c" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "count")" = "0"
}

make_arg_parser_with_short_optional_sub_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'x' "destination" "command" 'action' 'sub_argument' )"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "short" 's' destination 'source')"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "long" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "-x" "copy" '-s' "FROM" -x copy --target "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "-x" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"

  arguments="$(parseargs_parse_arguments "${parser}" "-x" "copy" '-s' "FROM" -x delete UNLOVED -x copy --target "TO")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "2"
  cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_short_optional_sub_arguments_and_alias_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_argument' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "short" 'r' "long" 'recursive' 'action' 'store_true')"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del' 'remove' 'rm')"
  local arguments="$(parseargs_parse_arguments "${parser}" '-c' "delete" "UNLOVED" -c delete '-r')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "del" "UNLOVED" -c 'del' '-r')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "remove" "UNLOVED" -c remove '--recursive')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '-c' "del" "UNLOVED" -c 'rm' '-r')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
}

make_arg_parser_with_short_optional_sub_argument_with_sub_argument_with_default_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_argument' )"
  local countcmdparser="$(parseargs_new_argument_parser)"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "short" "c" destination "count" "action" "count" "default" '0' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "-c" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "count")" = "0"
}

make_arg_parser_with_and_short_optional_sub_argument_with_default_and_sub_argument_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_argument' )"
  local countcmdparser="$(parseargs_new_argument_parser "argument_default" '0')"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "short" "c" destination "count" "action" "count" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "-c" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "count")" = "0"
}

make_arg_parser_with_long_optional_arguments_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_arguments_and_explicit_action_store_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "action" "store")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "action" "store")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_arguments_with_action_append_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" long "sources" "action" "append")"
  parser="$(parseargs_add_argument "${parser}" "long" "targets" "action" "append")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--sources" "FROM" "--targets" "TO" "--sources" "HERE" "--targets" "THERE")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "FROM"
  CHECK "$(dict_get "${sources}" "1")" = "HERE"
  local targets="$(dict_get "${arguments}" "targets")"
  CHECK "$(dict_size "${targets}")" = "2"
  CHECK "$(dict_get "${targets}" "0")" = "TO"
  CHECK "$(dict_get "${targets}" "1")" = "THERE"
}

make_arg_parser_with_long_optional_arguments_with_action_extend_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" long "sources" "action" "extend")"
  parser="$(parseargs_add_argument "${parser}" "long" "targets" "action" "extend")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--sources" "FROM" "--targets" "TO" "--sources" "HERE" "--targets" "THERE")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "FROM"
  CHECK "$(dict_get "${sources}" "1")" = "HERE"
  local targets="$(dict_get "${arguments}" "targets")"
  CHECK "$(dict_size "${targets}")" = "2"
  CHECK "$(dict_get "${targets}" "0")" = "TO"
  CHECK "$(dict_get "${targets}" "1")" = "THERE"
}

make_arg_parser_with_long_optional_version_action_with_version_text_and_parse_version_flag_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "version" "action" "version" "version" 'VERSION TEXT' )"
  arguments="$(parseargs_parse_arguments "${parser}" '--version')"
  if dict_is_dict "${arguments}"; then
    local arguments_is_dict=true
  else
    local arguments_is_dict=false
  fi
  CHECK_FALSE ${arguments_is_dict}
  CHECK_CONTAINS_ALL "${arguments}" 'VERSION' 'TEXT'
}

make_arg_parser_with_long_optional_arguments_from_choices_set_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "FROM" "_" "TO" "_")"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = ""
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = ""
}

make_arg_parser_with_long_optional_arguments_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "source")" = ""
  CHECK "$(dict_get "${arguments}" "target")" = ""

}

make_arg_parser_with_long_optional_arguments_and_parse_some_arguments_after_equals() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source=FR=O=M" "--target=TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FR=O=M"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_flags_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" "action" "store_true")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "action" "store_false")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--yes" "--no" )"
  CHECK "$(dict_get "${arguments}" "yes")"
  CHECK_FALSE "$(dict_get "${arguments}" "no")" 
  arguments="$(parseargs_parse_arguments "${parser}" "--no" "--yes" )"
  CHECK "$(dict_get "${arguments}" "yes")"
  CHECK_FALSE "$(dict_get "${arguments}" "no")" 
}

make_arg_parser_with_long_optional_flags_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" "action" "store_true")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "action" "store_false")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK_FALSE "$(dict_get "${arguments}" "yes")" 
  CHECK "$(dict_get "${arguments}" "no")"

}

make_arg_parser_with_long_optional_const_flags_and_parse_all_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--yes" '--no' )"
  CHECK "$(dict_get "${arguments}" "yes")" = 'yes'
  CHECK "$(dict_get "${arguments}" "no")" = 'no'
  arguments="$(parseargs_parse_arguments "${parser}" "--no" --yes )"
  CHECK "$(dict_get "${arguments}" "yes")" = 'yes'
  CHECK "$(dict_get "${arguments}" "no")" = 'no'
}

make_arg_parser_with_long_optional_const_flags_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK -z "$(dict_get "${arguments}" "yes")" 
  CHECK -z "$(dict_get "${arguments}" "no")"
}

make_arg_parser_with_long_optional_const_flags_same_dest_and_parse_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" destination "answer" "action" "store_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "destination" "answer" "action" "store_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--yes" )"
  CHECK "$(dict_get "${arguments}" "answer")" = 'yes'
  arguments="$(parseargs_parse_arguments "${parser}" "--no" )"
  CHECK "$(dict_get "${arguments}" "answer")" = 'no'
}

make_arg_parser_with_long_optional_const_flags_same_dest_with_append_const_action_and_parse_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "yes" destination "answer" "action" "append_const" "const" "yes")"
  parser="$(parseargs_add_argument "${parser}" "long" "no" "destination" "answer" "action" "append_const" "const" "no")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--yes" )"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "1"
  CHECK "$(dict_get "${answer}" "0")" = "yes"

  arguments="$(parseargs_parse_arguments "${parser}" "--no")"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "1"
  CHECK "$(dict_get "${answer}" "0")" = "no"

  local arguments="$(parseargs_parse_arguments "${parser}" "--yes" "--no" )"
  local answer="$(dict_get "${arguments}" "answer")"
  CHECK "$(dict_size "${answer}")" = "2"
  CHECK "$(dict_get "${answer}" "0")" = "yes"
  CHECK "$(dict_get "${answer}" "1")" = "no"
}

make_arg_parser_with_long_optional_multi_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--sources" "LEFT" "RIGHT" "--target" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_arguments_from_choices_set_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  local choices="$(dict_declare_simple "LEFT" "_" "TO" "_" "RIGHT" "_")"
  parser="$(parseargs_add_argument "${parser}" "long" "sources" "nargs" "2" "choices" "${choices}")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "choices" "${choices}")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--sources" "LEFT" "RIGHT" "--target" "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_arguments_and_parse_some_arguments_after_equals() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--sources=LE=F=T" "RIGHT" "--target=TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LE=F=T"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_argument_of_1_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "1" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source "FROM" --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_0_or_1_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "nargs" "?" "const" "VOIDSPACE")"
  parser="$(parseargs_add_argument "${parser}" "long" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "--source" "--target" "TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "VOIDSPACE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "--target" "TO" "--source" )"
  CHECK "$(dict_get "${arguments}" "source")" = "VOIDSPACE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source="GO" "FROM" "HERE" --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source "FROM" --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "*" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "0"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_1_or_many_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source="GO" "FROM" "HERE" --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_long_optional_multi_1_or_many_arguments_and_parse_1_argument() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" --source "FROM" --target "TO" )"
  local source="$(dict_get "${arguments}" "source")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

parse_no_arguments_for_parser_with_long_optional_multi_1_or_many_arguments_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long"  "source" "nargs" "+" )"
  parser="$(parseargs_add_argument "${parser}" "long"  "target")"
  local returned_error="" 
  returned_error="$(parseargs_parse_arguments "${parser}" --source --target "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

make_arg_parser_with_long_optional_multi_0_or_many_argument_with_append_action_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "sources" "destination" "sources" "nargs" "*" "action" "append")"
  local arguments="$(parseargs_parse_arguments "${parser}" --sources --sources="GO" "FROM" "HERE" --sources "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "3"
  local source="$(dict_get "${sources}" "0")"
  CHECK "$(dict_size "${source}")" = "0"

  source="$(dict_get "${sources}" "1")"
  CHECK "$(dict_size "${source}")" = "3"
  CHECK "$(dict_get "${source}" "0")" = "GO"
  CHECK "$(dict_get "${source}" "1")" = "FROM"
  CHECK "$(dict_get "${source}" "2")" = "HERE"

  source="$(dict_get "${sources}" "2")"
  CHECK "$(dict_size "${source}")" = "1"
  CHECK "$(dict_get "${source}" "0")" = "TO"
}

make_arg_parser_with_long_optional_multi_0_or_many_argument_with_extend_action_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "sources" "destination" "sources" "nargs" "*" "action" "extend")"
  local arguments="$(parseargs_parse_arguments "${parser}" --sources --sources "GO" "FROM" "HERE" --sources "TO" )"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "4"

  CHECK "$(dict_get "${sources}" "0")" = "GO"
  CHECK "$(dict_get "${sources}" "1")" = "FROM"
  CHECK "$(dict_get "${sources}" "2")" = "HERE"
  CHECK "$(dict_get "${sources}" "3")" = "TO"
}

make_arg_parser_with_long_optional_sub_commands_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' )"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "source")"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "copy" "FROM" "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "--command" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_long_optional_sub_commands_and_alias_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del' 'remove' 'rm')"
  local arguments="$(parseargs_parse_arguments "${parser}" '--command' "delete" "UNLOVED")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "del" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "remove" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "rm" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_long_optional_sub_command_with_default_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' 'command' 'action' 'sub_command' )"
  local countcmdparser="$(parseargs_new_argument_parser)"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "long" "value" "action" "count" "default" '0' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"
}

make_arg_parser_with_long_optional_sub_command_with_argument_default_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' 'command' 'action' 'sub_command' )"
  local countcmdparser="$(parseargs_new_argument_parser "argument_default" '0')"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "long" "value" "action" "count" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"
}

make_arg_parser_with_long_optional_sub_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_argument' )"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "short" 's' destination 'source')"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "long" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "copy" '-s' "FROM" --command copy --target "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  arguments="$(parseargs_parse_arguments "${parser}" "--command" "delete" "UNLOVED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"

  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "copy" '-s' "FROM" "--command" "delete" "UNLOVED" --command copy --target "TO")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "2"
  local cmd_arg="$(dict_get "${command}" "copy")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "source")" = "FROM"
  CHECK "$(dict_get "${cmd_arg}" "target")" = "TO"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
}

make_arg_parser_with_long_optional_sub_arguments_and_alias_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_argument' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "short" 'r' "long" 'recursive' 'action' 'store_true')"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del' 'remove' 'rm')"
  local arguments="$(parseargs_parse_arguments "${parser}" '--command' "delete" "UNLOVED" --command delete '-r')"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "del" "UNLOVED" --command 'del' '-r')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "remove" "UNLOVED" --command remove '--recursive')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
  arguments="$(parseargs_parse_arguments "${parser}" '--command' "del" "UNLOVED" --command 'rm' '-r')"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "2"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "UNLOVED"
  CHECK "$(dict_get "${cmd_arg}" "recursive")" = "true"
}

make_arg_parser_with_long_optional_sub_argument_with_defaults_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' 'command' 'action' 'sub_argument' )"
  local countcmdparser="$(parseargs_new_argument_parser)"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "long" "value" "action" "count" "default" '0' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"
  local valuecmdparser="$(parseargs_new_argument_parser)"
  valuecmdparser="$(parseargs_add_argument "${valuecmdparser}" "long" "value" "default" 'normal' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "value" "${valuecmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "2"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"
  local cmd_arg="$(dict_get "${command}" "value")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "normal"

  arguments="$(parseargs_parse_arguments "${parser}" "--command" "value")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "2"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"
  local cmd_arg="$(dict_get "${command}" "value")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "normal"

  arguments="$(parseargs_parse_arguments "${parser}")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "2"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"
  local cmd_arg="$(dict_get "${command}" "value")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "normal"
}

make_arg_parser_with_long_optional_sub_command_with_defaults_and_parse_no_sub_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' 'command' 'action' 'sub_command' )"
  local countcmdparser="$(parseargs_new_argument_parser)"
  countcmdparser="$(parseargs_add_argument "${countcmdparser}" "long" "value" "action" "count" "default" '0' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "count" "${countcmdparser}" )"
  local valuecmdparser="$(parseargs_new_argument_parser)"
  valuecmdparser="$(parseargs_add_argument "${valuecmdparser}" "long" "value" "default" 'normal' )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "value" "${valuecmdparser}" )"

  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "count")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "count")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "0"

  arguments="$(parseargs_parse_arguments "${parser}" "--command" "value")"
  local command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "value")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "value")" = "normal"

  arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK -z "$(dict_get "${arguments}" "command")"
}

make_arg_parser_with_short_and_long_optional_arguments_forms_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "short" "s")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "short" "t")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--source" "FROM" "--target=TO" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  local arguments="$(parseargs_parse_arguments "${parser}" "-sHERE" "-t" "THERE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "HERE"
  CHECK "$(dict_get "${arguments}" "target")" = "THERE"
}

make_arg_parser_with_positional_and_short_and_long_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  parser="$(parseargs_add_argument "${parser}" "short" "p" destination "prefix")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "suffix")"
  parser="$(parseargs_add_argument "${parser}" "long" "action")"
  local arguments="$(parseargs_parse_arguments "${parser}" FROM "-sEPILOGUE" TO "--action" "COPY" "-p" "PRELUDE" )"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  CHECK "$(dict_get "${arguments}" "suffix")" = "EPILOGUE"
  CHECK "$(dict_get "${arguments}" "prefix")" = "PRELUDE"
  CHECK "$(dict_get "${arguments}" "action")" = "COPY"
}

make_arg_parser_with_positional_and_short_and_long_optional_multi_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  parser="$(parseargs_add_argument "${parser}" "short" "p" destination "prefixes" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "suffixes" "nargs" "3")"
  parser="$(parseargs_add_argument "${parser}" "long" "actions" "nargs" "2" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "LEFT" "RIGHT" "-sEPILOGUE" "NOTES" "INDEX" "TO" "--actions" "COPY" "RECURSIVE" "-p" "PRELUDE" "PROLOGUE")"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
  local suffixes="$(dict_get "${arguments}" "suffixes")"
  CHECK "$(dict_size "${suffixes}")" = "3"
  CHECK "$(dict_get "${suffixes}" "0")" = "EPILOGUE"
  CHECK "$(dict_get "${suffixes}" "1")" = "NOTES"
  CHECK "$(dict_get "${suffixes}" "2")" = "INDEX"
  local prefixes="$(dict_get "${arguments}" "prefixes")"
  CHECK "$(dict_size "${prefixes}")" = "2"
  CHECK "$(dict_get "${prefixes}" "0")" = "PRELUDE"
  CHECK "$(dict_get "${prefixes}" "1")" = "PROLOGUE"
  local actions="$(dict_get "${arguments}" "actions")"
  CHECK "$(dict_size "${actions}")" = "2"
  CHECK "$(dict_get "${actions}" "0")" = "COPY"
  CHECK "$(dict_get "${actions}" "1")" = "RECURSIVE"
}

make_arg_parser_with_optional_arguments_with_defaults_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "default" "FROM")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "default" "TO")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_defaults_and_optional_arguments_one_with_default_and_parse_no_arguments() {
  local parser="$(parseargs_new_argument_parser "argument_default" "None")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "default" "TO")"
  local arguments="$(parseargs_parse_arguments "${parser}")"
  CHECK "$(dict_get "${arguments}" "source")" = "None"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_required_optional_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "required" "true")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "required" "true")"
  local arguments="$(parseargs_parse_arguments "${parser}" "--target" "TO" "-s" "FROM")"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

make_arg_parser_with_required_optional_sub_commands_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' 'required' 'true')"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "delete" "NOT_NEEDED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "NOT_NEEDED"
}

make_arg_parser_with_required_optional_sub_arguments_and_parse_some_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_argument' 'required' 'true')"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local arguments="$(parseargs_parse_arguments "${parser}" "--command" "delete" "NOT_NEEDED")"
  command="$(dict_get "${arguments}" "command")"
  CHECK "$(dict_size "${command}")" = "1"
  local cmd_arg="$(dict_get "${command}" "delete")"
  CHECK "$(dict_size "${cmd_arg}")" = "1"
  CHECK "$(dict_get "${cmd_arg}" "item")" = "NOT_NEEDED"
}

parser_with_missing_required_optional_arguments_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "required" "true")"
  parser="$(parseargs_add_argument "${parser}" "long" "target" "required" "true")"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "--target" "TO" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "-s" "equired"

  returned_error="$(parseargs_parse_arguments "${parser}" "-s" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "--target" "equired"
}

parser_with_missing_required_optional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' 'required' 'true')"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "source")"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}"  2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "--command" "equired"
}

parser_with_missing_required_optional_sub_argument_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_argument' 'required' 'true')"
  local copycmdparser="$(parseargs_new_argument_parser)"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "source")"
  copycmdparser="$(parseargs_add_argument "${copycmdparser}" "name" "target")"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${copycmdparser}" )"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" )"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}"  2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "--command" "equired"
}

argument_nargs_attribute_can_be_in_range_integer() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "1")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "${__PARSEARGS_MAX_NARGS__}")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
}

argument_nargs_attribute_can_be_single_glob_character() {
  local parser="$(parseargs_new_argument_parser)"
  local is_parser=false
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "?" "default" "x")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "*")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
  parser="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "+")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"
}

argument_nargs_attribute_cannot_be_out_of_range_integer() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "0" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "$(( ${__PARSEARGS_MAX_NARGS__}+1 ))" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
}

argument_nargs_attribute_cannot_be_non_glob_non_interger_value() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "three" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "-1" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "3.14" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "??" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "**" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "++" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
  returned_error="$(parseargs_add_argument "${parser}" "name" "arguments" "nargs" "?*+" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nargs" "invalid"
}

argument_cannot_be_both_positional_and_optional() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false

  # errors exit and we lose the usual returned parser value
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "short" "o" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "o" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "name" "positional" "long" "optional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
  returned_error="$(parseargs_add_argument "${parser}" "long" "optional" "name" "positional" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "optional"
}

argument_needs_name_or_long_and_or_short_attribute() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "default" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "destination" "name" "long"
  returned_error="$(parseargs_add_argument "${parser}" "destination" "source" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "name" "long"
}

short_option_must_be_single_character() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "destination" "x")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "XX" "destination" "x" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "single"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  parser="$(parseargs_add_argument "${parser}" "short" "X" "long" "eggs")"
  CHECK $? -eq 0
  is_parser="parseargs_is_argument_parser  ${parser}"
  REQUIRE -n "${is_parser}"
  REQUIRE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "short" "X" "destination" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "short" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
  returned_error="$(parseargs_add_argument "${parser}" "long" "eggs" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "long" "previously"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"  
}

__check_repeated_argument_attribute_for_single_argument__() {
  local attribute="${1}"
  local value_1="${2}"
  local value_2="${3}"
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  local is_parser=false
  returned_error="$(parseargs_add_argument "${parser}" "${attribute}" "${value_1}" "${attribute}" "${value_1}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "${attribute}" "once"
  is_parser="parseargs_is_argument_parser  ${returned_error}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"
}

argument_name_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "name" "X" "Y"
}

argument_short_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "short" "X" "Y"
}

argument_long_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "long" "eggs" "why"
}

argument_destination_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "destination" "eggs" "why"
}

argument_action_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "action" "store_true" "store_false"
}

argument_nargs_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  __check_repeated_argument_attribute_for_single_argument__ "nargs" "2" "*"
}

argument_const_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
   __check_repeated_argument_attribute_for_single_argument__ "const" "yes" "no"
}

argument_default_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
   __check_repeated_argument_attribute_for_single_argument__ "default" "yes" "no"
}

argument_required_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
   __check_repeated_argument_attribute_for_single_argument__ "required" "true" "True"
}

argument_choices_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call() {
  local choices="$(dict_declare_simple "FROM" "_" "TO" "_")"
  __check_repeated_argument_attribute_for_single_argument__ "choices" "${choices}" "${choices}"
}

# add other xxx_attribute_cannot_be_repeated tests as support is added...

extra_positional_arguments_ignored_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "FROM" "TO" "EXTRA" 2>/dev/null)"
  CHECK "$(dict_get "${arguments}" "source")" = "FROM"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

extra_positional_multi_arguments_ignored_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  local arguments="$(parseargs_parse_arguments "${parser}" "LEFT" "RIGHT" "TO" "EXTRA" 2>/dev/null)"
  local sources="$(dict_get "${arguments}" "sources")"
  CHECK "$(dict_size "${sources}")" = "2"
  CHECK "$(dict_get "${sources}" "0")" = "LEFT"
  CHECK "$(dict_get "${sources}" "1")" = "RIGHT"
  CHECK "$(dict_get "${arguments}" "target")" = "TO"
}

too_few_positional_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  returned_error="$(parseargs_parse_arguments "${parser}" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing" "ositional"
}

too_few_sub_command_positional_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_command' )"
  local subparser="$(parseargs_new_argument_parser)"
  subparser="$(parseargs_add_argument "${subparser}" "name" "source")"
  subparser="$(parseargs_add_argument "${subparser}" "name" "target")"
  local returned_error=""
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${subparser}" )"
  returned_error="$(parseargs_parse_arguments "${parser}" -c copy "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing" "ositional"
}

too_few_sub_argument_positional_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' "destination" "command" 'action' 'sub_argument' )"
  local subparser="$(parseargs_new_argument_parser)"
  subparser="$(parseargs_add_argument "${subparser}" "name" "source")"
  subparser="$(parseargs_add_argument "${subparser}" "name" "target")"
  local returned_error=""
  parser="$(parseargs_add_sub_parser "${parser}" "command" "copy" "${subparser}" )"
  returned_error="$(parseargs_parse_arguments "${parser}" -c copy "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing" "ositional"
}

too_few_positional_multi_arguments_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "name" "source")"
  parser="$(parseargs_add_argument "${parser}" "name" "targets" "nargs" "2")"
  returned_error="$(parseargs_parse_arguments "${parser}" "FROM" "LEFT" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing" "ositional"
}

unknown_short_option_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "-sFROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nknown" "option"
}

unknown_long_option_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" "-source" "FROM" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "nknown" "option"
}

argument_values_starting_with_hyphens_must_be_preceded_by_the_argument_separator() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "short" "o" "long" "option")"
  parser="$(parseargs_add_argument "${parser}" "short" "f" "long" "following")"
  parser="$(parseargs_add_argument "${parser}" "name" "positional")"
  local arguments="$(parseargs_parse_arguments "${parser}" "-o" "--" "--following" \
                                                           "--" "--positional--" \
                                                           "--following" -- "-o")"
  CHECK $? -eq 0
  CHECK "$(dict_get "${arguments}" "option")" = "--following"
  CHECK "$(dict_get "${arguments}" "following")" = "-o"
  CHECK "$(dict_get "${arguments}" "positional")" = "--positional--"
}

missing_short_option_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "short" "o" "destination" "argument")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  parser="$(parseargs_add_argument "${parser}" "short" "f" "destination" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "-f" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

missing_short_option_multi_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "short" "o" "destination" "argument" "nargs" "2")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "onlyone" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  parser="$(parseargs_add_argument "${parser}" "short" "f" "destination" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "onlyone" "-f" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "-o" "onlyone" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

missing_long_option_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "long" "option")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  parser="$(parseargs_add_argument "${parser}" "long" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "--following" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

missing_long_option_multi_argument_is_an_error_when_parsed() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=""
  parser="$(parseargs_add_argument "${parser}" "long" "option" "nargs" "2")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "onlyone" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  parser="$(parseargs_add_argument "${parser}" "long" "following")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "onlyone" "--following" "following-value" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
  returned_error="$(parseargs_parse_arguments "${parser}" "--option" "onlyone" "--" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "missing"
}

positional_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "name" "source" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "0" "choice"
}

positional_multi_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "name" "source" "nargs" "2" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "HERE" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "positional" "0" "choice"
}

short_optional_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-s" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "option" "-s" "choice"
}

short_optional_multi_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "destination" "source" "nargs" "2" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "-sHERE" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "option" "-s" "choice"
}

long_optional_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--source" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "option" "--source" "choice"
}

long_optional_multi_argument_value_not_one_of_specified_choices_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local choices="$(dict_declare_simple "FROM" "_" "HERE" "_")"
  parser="$(parseargs_add_argument "${parser}" "long" "source" "nargs" "2" "choices" "${choices}")"
  returned_error="$(parseargs_parse_arguments "${parser}" "--source=HERE" "THERE" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "option" "--source" "choice"
}

positional_specified_with_nargs_0_or_1_but_no_default_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "name" "arg1" "nargs" "?" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "default"
}

short_optional_specified_with_nargs_0_or_1_but_no_const_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "short" "a" "destination" "arg1" "nargs" "?" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "const"
}

long_optional_specified_with_nargs_0_or_1_but_no_const_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "long" "arg1" "nargs" "?" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "const"
}

unknown_positional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'name' "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del')"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}"  'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

unknown_long_optional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del')"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" '--command' 'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

unknown_short_optional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' 'destination' "command" 'action' 'sub_command' )"
  local delcmdparser="$(parseargs_new_argument_parser)"
  delcmdparser="$(parseargs_add_argument "${delcmdparser}" "name" "item")"
  parser="$(parseargs_add_sub_parser "${parser}" "command" "delete" "${delcmdparser}" 'del')"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" '-c' 'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

no_sub_parsers_for_positional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'name' "command" 'action' 'sub_command' )"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}"  'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

no_sub_parsers_for_long_optional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'long' "command" 'action' 'sub_command' )"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" '--command' 'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

no_sub_parsers_for_short_optional_sub_command_is_an_error() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" 'short' 'c' 'destination' "command" 'action' 'sub_command' )"
  local returned_error=""
  returned_error="$(parseargs_parse_arguments "${parser}" '-c' 'rm' 'BE_GONE' 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "rm" "command"
}

__positional_argument_cannot_have_action__() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "name" "arg1" "action" "${@}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "${1}" "positional"
}

positional_argument_cannot_have_store_true_action() {
  __positional_argument_cannot_have_action__ 'store_true'
}

positional_argument_cannot_have_store_false_action() {
  __positional_argument_cannot_have_action__ 'store_false'
}

positional_argument_cannot_have_store_const_action() {
  __positional_argument_cannot_have_action__ 'store_const' 'const' 'blah'
}

positional_argument_cannot_have_append_action() {
  __positional_argument_cannot_have_action__ 'append'
}

positional_argument_cannot_have_extend_action() {
  __positional_argument_cannot_have_action__ 'extend'
}

positional_argument_cannot_have_append_const_action() {
  __positional_argument_cannot_have_action__ 'append_const' 'const' 'blah'
}

positional_argument_cannot_have_count_action() {
  __positional_argument_cannot_have_action__ 'count'
}

positional_argument_cannot_have_sub_argument_action() {
  __positional_argument_cannot_have_action__ 'sub_argument'
}

positional_argument_cannot_have_version_action() {
  __positional_argument_cannot_have_action__ 'version'
}

positional_argument_cannot_have_help_action() {
  __positional_argument_cannot_have_action__ 'help'
}

__long_optional_argument_with_action_cannot_have_attribute_raw__(){
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  local action_type="${1}"
  local bad_attribute="${2}"
  shift 2
  returned_error="$(parseargs_add_argument "${parser}" "long" "arg1" "action" "${action_type}" "${bad_attribute}" "${@}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "${action_type}" "${bad_attribute}"
}

__long_optional_argument_with_action_cannot_have_attribute__() {
  local action_type="${1}"
  local bad_attribute="${2}"
  shift 2
  __long_optional_argument_with_action_cannot_have_attribute_raw__ "${action_type}" "${bad_attribute}" "2" "${@}"
}

optional_argument_with_store_true_action_cannot_specify_default() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_true' 'default'
}

optional_argument_with_store_false_action_cannot_specify_default() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_false' 'default'
}

optional_argument_with_version_action_cannot_specify_default() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'version' 'default' 'version' 'version text'
}

optional_argument_with_help_action_cannot_specify_default() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'help' 'default'
}

optional_argument_with_store_true_action_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_true' 'const'
}

optional_argument_with_store_false_action_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_false' 'const'
}

optional_argument_with_count_action_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'count' 'const'
}

optional_argument_with_version_action_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'version' 'const' 'version' 'version text'
}

optional_argument_with_help_action_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'help' 'const'
}

optional_argument_with_store_true_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_true' 'nargs'
}

optional_argument_with_store_false_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_false' 'nargs'
}

optional_argument_with_store_const_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'store_const' 'nargs' 'const' 'blah'
}

optional_argument_with_append_const_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'append_const' 'nargs' 'const' 'blah'
}

optional_argument_with_count_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'count' 'nargs'
}

optional_argument_with_version_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'version' 'nargs' 'version' 'version text'
}

optional_argument_with_help_action_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'help' 'nargs'
}

optional_argument_with_version_action_cannot_specify_required() {
  __long_optional_argument_with_action_cannot_have_attribute_raw__ 'version' 'required' 'true' 'version' 'version text'
}

optional_argument_with_version_action_cannot_specify_choices() {
  __long_optional_argument_with_action_cannot_have_attribute_raw__ 'version' 'choices' "$(dict_declare_simple "A" "_" "B" "_")" 'version' 'version text'
}

optional_argument_with_help_action_cannot_specify_required() {
  __long_optional_argument_with_action_cannot_have_attribute_raw__ 'help' 'required' 'true'
}

optional_argument_with_help_action_cannot_specify_choices() {
  __long_optional_argument_with_action_cannot_have_attribute_raw__ 'help' 'choices' "$(dict_declare_simple "A" "_" "B" "_")"
}

optional_argument_with_help_action_cannot_specify_version() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'help' 'version' 'VersionText'
}

sub_command_argument_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'sub_command' 'nargs'
}

sub_command_argument_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'sub_command' 'const'
}

sub_argument_argument_cannot_specify_nargs() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'sub_argument' 'nargs'
}

sub_argument_argument_cannot_specify_const() {
  __long_optional_argument_with_action_cannot_have_attribute__ 'sub_argument' 'const'
}

__optional_argument_with_a_const_action_must_specify_const__() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "long" "arg1" "action" "${1}" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "${1}" 'const' 'required'
}

optional_argument_with_store_const_action_must_specify_const() {
  __optional_argument_with_a_const_action_must_specify_const__ 'store_const'
}

optional_argument_with_append_const_action_must_specify_const() {
  __optional_argument_with_a_const_action_must_specify_const__ 'append_const'
}

optional_argument_with_a_version_action_must_specify_version() {
  local parser="$(parseargs_new_argument_parser)"
  local returned_error=''
  returned_error="$(parseargs_add_argument "${parser}" "long" "arg1" "action" "version" 2>&1)"
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${returned_error}" "ERROR" "${1}" 'version' 'required'
}

view_default_help_for_parser_with_short_long_positional_arguments() {
  local parser="$(parseargs_new_argument_parser)"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "name" "target")"
  parser="$(parseargs_add_argument "${parser}" "long" "actions" "nargs" "2" )"
  parser="$(parseargs_add_argument "${parser}" "short" "n" 'destination' 'debug' 'action' 'store_true' )"
  parser="$(parseargs_add_argument "${parser}" "short" "p" long "prefixes" "nargs" "2")"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "long" "suffixes" "nargs" "3")"
  local text="$(parseargs_parse_arguments "${parser}" '-h' )"
  is_parser=true
  is_parser="parseargs_is_argument_parser  ${dict}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"
  echo '\n\n---------------------------------------------------------------------------------'
  echo 'view_default_help_for_parser_with_short_long_positional_arguments output:'
  echo '\n---------------------------------------------------------------------------------'
  echo "${text}" 
  echo '---------------------------------------------------------------------------------\n'
}

view_all_parts_help_for_parser_with_short_long_positional_arguments() {
  local parser="$(parseargs_new_argument_parser 'prog' 'test-help-max' 'usage' 'custom usage text' \
                  'description' 'testing all help formatting with all parts specified explicily' \
                  'epilogue' 'this test specifies all textual help parts explicitly:\n - program name\n - explicit usage text\n - short description\n - longer following epilogue text\n - argument descriptions')"
  parser="$(parseargs_add_argument "${parser}" "name" "sources" "nargs" "2" 'help' 'the two input resources')"
  parser="$(parseargs_add_argument "${parser}" "name" "target" 'help' 'the single output resource')"
  parser="$(parseargs_add_argument "${parser}" "long" "actions" "nargs" "2" 'help' 'the action to perform to combine the resources')"
  parser="$(parseargs_add_argument "${parser}" "short" "n" 'destination' 'debug' 'action' 'store_true' 'help' 'only show operations performed; do not perform them' )"
  parser="$(parseargs_add_argument "${parser}" "short" "p" long "prefixes" "nargs" "2" 'help' 'prefix data from the input resources')"
  parser="$(parseargs_add_argument "${parser}" "short" "s" "long" "suffixes_longname" "nargs" "5" 'help' 'suffix data from the input and output resources plus two auxillary suffixes that are initially and finally appended to all')"
  local text="$(parseargs_parse_arguments "${parser}" '-h' )"
  is_parser=true
  is_parser="parseargs_is_argument_parser  ${dict}"
  REQUIRE -n "${is_parser}"
  REQUIRE_FALSE "${is_parser}"
  echo '---------------------------------------------------------------------------------'
  echo 'view_all_parts_help_for_parser_with_short_long_positional_arguments output:'
  echo '\n---------------------------------------------------------------------------------'
  echo "${text}" 
  echo '---------------------------------------------------------------------------------\n'
}

#set -x
#TEST view_all_parts_help_for_parser_with_short_long_positional_arguments
#PRINT_TEST_COUNTS
#exit 0
TEST parsearg_functions_complain_if_parameter_not_a_parseargs_parser
TEST requesting_a_new_parser_returns_a_valid_parser
TEST make_arg_parser_with_positional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_arguments_and_explicit_action_store_and_parse_some_arguments
TEST make_arg_parser_with_positional_arguments_from_choices_set_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_arguments_from_choices_set_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_argument_of_1_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_0_or_1_arguments_and_parse_some_arguments
TEST make_arg_parser_with_default_and_positional_multi_0_or_1_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_1_argument
TEST make_arg_parser_with_positional_multi_0_or_many_arguments_and_parse_no_arguments
TEST make_arg_parser_with_positional_multi_1_or_many_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_multi_1_or_many_arguments_and_parse_1_argument
TEST parse_no_arguments_for_parser_with_positional_multi_1_or_many_arguments_is_an_error
TEST make_arg_parser_with_positional_sub_commands_and_parse_some_arguments
TEST make_arg_parser_with_positional_sub_commands_and_alias_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_arguments_and_explicit_action_store_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_arguments_with_action_append_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_arguments_with_action_extend_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_version_action_with_version_text_and_parse_version_flag_argument
TEST make_arg_parser_with_short_optional_arguments_from_choices_set_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_arguments_and_parse_some_arguments_no_space
TEST make_arg_parser_with_short_optional_flags_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_flags_and_parse_all_arguments_grouped
TEST make_arg_parser_with_short_optional_flags_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_const_flags_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_const_flags_and_parse_all_arguments_grouped
TEST make_arg_parser_with_short_optional_const_flags_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_const_flags_same_dest_and_parse_arguments
TEST make_arg_parser_with_short_optional_const_flags_same_dest_with_append_const_action_and_parse_arguments
TEST make_arg_parser_with_short_optional_flag_count_and_parse_all_arguments
TEST make_arg_parser_with_short_optional_flag_count_and_parse_all_arguments_grouped
TEST make_arg_parser_with_short_optional_flag_count_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_flag_count_with_default_and_parse_no_arguments
TEST make_arg_parser_with_default_and_short_optional_flag_count_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_multi_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_arguments_from_choices_set_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_arguments_and_parse_some_arguments_no_space
TEST make_arg_parser_with_short_optional_multi_argument_of_1_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_0_or_1_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_1_argument
TEST make_arg_parser_with_short_optional_multi_0_or_many_argument_and_parse_no_arguments
TEST make_arg_parser_with_short_optional_multi_1_or_many_argument_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_1_or_many_argument_and_parse_1_argument
TEST parse_no_arguments_for_parser_with_short_optional_multi_1_or_many_arguments_is_an_error
TEST make_arg_parser_with_short_optional_multi_0_or_many_argument_with_append_action_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_multi_0_or_many_argument_with_extend_action_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_sub_commands_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_sub_commands_and_alias_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_sub_command_with_default_and_parse_no_sub_arguments
TEST make_arg_parser_with_short_optional_sub_command_with_argument_default_and_parse_no_sub_arguments
TEST make_arg_parser_with_short_optional_sub_arguments_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_sub_arguments_and_alias_and_parse_some_arguments
TEST make_arg_parser_with_short_optional_sub_argument_with_sub_argument_with_default_and_parse_no_sub_arguments
TEST make_arg_parser_with_and_short_optional_sub_argument_with_default_and_sub_argument_parse_no_sub_arguments
TEST make_arg_parser_with_long_optional_arguments_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_arguments_and_explicit_action_store_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_arguments_with_action_append_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_arguments_with_action_extend_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_version_action_with_version_text_and_parse_version_flag_argument
TEST make_arg_parser_with_long_optional_arguments_from_choices_set_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_arguments_and_parse_no_arguments
TEST make_arg_parser_with_long_optional_arguments_and_parse_some_arguments_after_equals
TEST make_arg_parser_with_long_optional_multi_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_flags_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_flags_and_parse_no_arguments
TEST make_arg_parser_with_long_optional_const_flags_and_parse_all_arguments
TEST make_arg_parser_with_long_optional_const_flags_and_parse_no_arguments
TEST make_arg_parser_with_long_optional_const_flags_same_dest_and_parse_arguments
TEST make_arg_parser_with_long_optional_const_flags_same_dest_with_append_const_action_and_parse_arguments
TEST make_arg_parser_with_long_optional_multi_arguments_from_choices_set_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_arguments_and_parse_some_arguments_after_equals
TEST make_arg_parser_with_long_optional_multi_argument_of_1_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_0_or_1_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_1_argument
TEST make_arg_parser_with_long_optional_multi_0_or_many_arguments_and_parse_no_arguments
TEST make_arg_parser_with_long_optional_multi_1_or_many_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_1_or_many_arguments_and_parse_1_argument
TEST parse_no_arguments_for_parser_with_long_optional_multi_1_or_many_arguments_is_an_error
TEST make_arg_parser_with_long_optional_multi_0_or_many_argument_with_append_action_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_multi_0_or_many_argument_with_extend_action_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_sub_commands_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_sub_commands_and_alias_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_sub_command_with_default_and_parse_no_sub_arguments
TEST make_arg_parser_with_long_optional_sub_command_with_argument_default_and_parse_no_sub_arguments
TEST make_arg_parser_with_long_optional_sub_arguments_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_sub_arguments_and_alias_and_parse_some_arguments
TEST make_arg_parser_with_long_optional_sub_argument_with_defaults_and_parse_no_sub_arguments
TEST make_arg_parser_with_long_optional_sub_command_with_defaults_and_parse_no_sub_arguments
TEST make_arg_parser_with_short_and_long_optional_arguments_forms_and_parse_some_arguments
TEST make_arg_parser_with_positional_and_short_and_long_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_positional_and_short_and_long_optional_multi_arguments_and_parse_some_arguments
TEST make_arg_parser_with_optional_arguments_with_defaults_and_parse_no_arguments
TEST make_arg_parser_with_defaults_and_optional_arguments_one_with_default_and_parse_no_arguments
TEST make_arg_parser_with_required_optional_arguments_and_parse_some_arguments
TEST make_arg_parser_with_required_optional_sub_commands_and_parse_some_arguments
TEST make_arg_parser_with_required_optional_sub_arguments_and_parse_some_arguments
TEST parser_with_missing_required_optional_arguments_is_an_error
TEST parser_with_missing_required_optional_sub_command_is_an_error
TEST parser_with_missing_required_optional_sub_argument_is_an_error
TEST argument_nargs_attribute_can_be_in_range_integer
TEST argument_nargs_attribute_can_be_single_glob_character
TEST argument_nargs_attribute_cannot_be_out_of_range_integer
TEST argument_nargs_attribute_cannot_be_non_glob_non_interger_value
TEST argument_cannot_be_both_positional_and_optional
TEST argument_needs_name_or_long_and_or_short_attribute
TEST short_option_must_be_single_character
TEST options_may_have_short_and_or_long_names_but_each_must_be_unique_in_its_namespace
TEST argument_name_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_short_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_long_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_destination_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_action_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_nargs_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_const_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_default_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_required_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST argument_choices_attribute_cannot_be_repeated_in_single_parseargs_add_argument_call
TEST extra_positional_arguments_ignored_when_parsed
TEST extra_positional_multi_arguments_ignored_when_parsed
TEST too_few_positional_arguments_is_an_error_when_parsed
TEST too_few_sub_command_positional_arguments_is_an_error_when_parsed
TEST too_few_sub_argument_positional_arguments_is_an_error_when_parsed
TEST too_few_positional_multi_arguments_is_an_error_when_parsed
TEST unknown_short_option_is_an_error_when_parsed
TEST unknown_long_option_is_an_error_when_parsed
TEST argument_values_starting_with_hyphens_must_be_preceded_by_the_argument_separator
TEST missing_short_option_argument_is_an_error_when_parsed
TEST missing_short_option_multi_argument_is_an_error_when_parsed
TEST missing_long_option_argument_is_an_error_when_parsed
TEST missing_long_option_multi_argument_is_an_error_when_parsed
TEST positional_argument_value_not_one_of_specified_choices_is_an_error
TEST positional_multi_argument_value_not_one_of_specified_choices_is_an_error
TEST short_optional_argument_value_not_one_of_specified_choices_is_an_error
TEST short_optional_multi_argument_value_not_one_of_specified_choices_is_an_error
TEST long_optional_argument_value_not_one_of_specified_choices_is_an_error
TEST long_optional_multi_argument_value_not_one_of_specified_choices_is_an_error
TEST positional_specified_with_nargs_0_or_1_but_no_default_is_an_error
TEST short_optional_specified_with_nargs_0_or_1_but_no_const_is_an_error
TEST long_optional_specified_with_nargs_0_or_1_but_no_const_is_an_error
TEST unknown_positional_sub_command_is_an_error
TEST unknown_long_optional_sub_command_is_an_error
TEST unknown_short_optional_sub_command_is_an_error
TEST no_sub_parsers_for_positional_sub_command_is_an_error
TEST no_sub_parsers_for_long_optional_sub_command_is_an_error
TEST no_sub_parsers_for_short_optional_sub_command_is_an_error
TEST positional_argument_cannot_have_store_true_action
TEST positional_argument_cannot_have_store_false_action
TEST positional_argument_cannot_have_store_const_action
TEST positional_argument_cannot_have_append_action
TEST positional_argument_cannot_have_extend_action
TEST positional_argument_cannot_have_append_const_action
TEST positional_argument_cannot_have_count_action
TEST positional_argument_cannot_have_sub_argument_action
TEST positional_argument_cannot_have_version_action
TEST positional_argument_cannot_have_help_action
TEST optional_argument_with_store_true_action_cannot_specify_default
TEST optional_argument_with_store_false_action_cannot_specify_default
TEST optional_argument_with_version_action_cannot_specify_default
TEST optional_argument_with_help_action_cannot_specify_default
TEST optional_argument_with_store_true_action_cannot_specify_const
TEST optional_argument_with_store_false_action_cannot_specify_const
TEST optional_argument_with_count_action_cannot_specify_const
TEST optional_argument_with_version_action_cannot_specify_const
TEST optional_argument_with_help_action_cannot_specify_const
TEST optional_argument_with_store_true_action_cannot_specify_nargs
TEST optional_argument_with_store_false_action_cannot_specify_nargs
TEST optional_argument_with_store_const_action_cannot_specify_nargs
TEST optional_argument_with_append_const_action_cannot_specify_nargs
TEST optional_argument_with_count_action_cannot_specify_nargs
TEST optional_argument_with_version_action_cannot_specify_nargs
TEST optional_argument_with_help_action_cannot_specify_nargs
TEST optional_argument_with_version_action_cannot_specify_required
TEST optional_argument_with_version_action_cannot_specify_choices
TEST optional_argument_with_help_action_cannot_specify_required
TEST optional_argument_with_help_action_cannot_specify_choices
TEST optional_argument_with_help_action_cannot_specify_version
TEST sub_command_argument_cannot_specify_nargs
TEST sub_command_argument_cannot_specify_const
TEST sub_argument_argument_cannot_specify_nargs
TEST sub_argument_argument_cannot_specify_const
TEST optional_argument_with_store_const_action_must_specify_const
TEST optional_argument_with_append_const_action_must_specify_const
TEST optional_argument_with_a_version_action_must_specify_version
TEST view_default_help_for_parser_with_short_long_positional_arguments
TEST view_all_parts_help_for_parser_with_short_long_positional_arguments
PRINT_TEST_COUNTS
