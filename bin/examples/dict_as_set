#!/bin/sh
# Copyright (c) 2022 Ralph. E. McArdell
# All rights reserved.
# Licensed under BSD 2-Clause License - see LICENSE.md for full text.
#
# To use:
#   - Add dict.sh in the repository lib directory to the PATH. For example
#     if you have cd'ed to the repository's bin/examples directory:
#       PATH="../../lib/":"${PATH}"
#   - Execute dict_as_set, again if from the repository's bin/examples
#     directory:
#       ./dict_as_set

# Include the dict code. This assumes dict.sh is either in the same directory
# as the executing script or on the PATH. If not then use the dict.sh path:
. dict.sh

# Define functions to work with dicts simulating sets. Most functions return
# their value in the gobal set_return_value variable, which we initialse to a
# known, empty, state here:
set_return_value=''

# Define a set_declare function that wraps a call to dict_declare_simple.
# Like dict_declare/dict_declare_simple set_declare take an optional,
# variable, number of values to initialise the new set-dict with, however
# each argument is a *whole* set entry which must be paired with a
# non-empty but otherwise don't care value before being passed to
# dict_declare_simple:
set_declare() {
  # Insert a '_' value after each passed set value to convert them to
  # dict key:value entry argument pairs. This has to be done carefully as
  # we are consuming and modifying $@ at the same time! The method is:
  #   1. set the count of how many parameter values $@ contains _before_
  #      we start. This is because the number of parameters varies as
  #      each '_' is added.
  #   2. iterate for each parameter originally in $@ - i.e. count times:
  #     2.1. grab the next set value, which is the next dict key.
  #     2.2. remove this value from $@
  #     2.3. set a new set of parameters, starting with the remaining
  #          parameters in $@ - including previously updated parameters
  #          with the '_' values interspersed, and then append the next
  #          updated key and inserted '_'  value.
  #     2.4  decrement the remaining count of parameters to update.
  local count=$#
  while [ ${count} -gt 0 ]; do
    local key="${1}"
    shift
    set -- "$@" ${key} '_'
    count=$(( ${count}-1 ))
  done

  # Declare the dict-simulating-a-set with the dict-as-set value assigned
  # to set_return_value:
  set_return_value="$(dict_declare_simple "$@")"
}

# Define a set_contains function that checks to see if a set (1st parameter)
# contains a value (2nd parameter). Directly returns true if the set contains
# the value or false if it does not.
set_contains() {
  local set="${1}"    # the haystack to search
  local value="${2}"  # the needle to find
  local maybe_in="$(dict_get_simple "${set}" "${value}")"
  if [ -n "${maybe_in}" ]; then
    true; return
  else
    false; return
  fi
}

# Define a set_add_members function that adds one or more members to a set.
# The set only increases its membership if a value is not already a member
# of the set. The updated set is returned in set_return_value.
set_add_members() {
  local set="${1}"
  shift
  # Once again convert set value arguments to dict:key value pair arguments
  local count=$#
  while [ ${count} -gt 0 ]; do
    local key="${1}"
    shift
    set -- "$@" ${key} '_'
    count=$(( ${count}-1 ))
  done
  # pass the set and converted entry values to dict_set_simple. Existing
  # entries will be overwritten, not performant but logically correct:
  set_return_value="$(dict_set_simple "${set}" "$@")"
}

# Define a set_union function that returns the union of two sets.
# Uses dict_for_each to append any values in 2nd set not in 1st set to
# the result which is initially assigned the value of the 1st set.
# Returns the resultant union set in set_return_value.
set_union() {
  set_return_value="${1}"
  dict_for_each "${2}" set_union_op
}

# Define set_union_op the per-member operation function for set_union.
# Called by dict_for_each for each of the members of the 2nd operand that
# set_union passes to dict_for_each. It calls set_add_members to ensure each
# one is in the result set in set_return_value.
set_union_op() {
  local member="${1}"
  set_add_members "${set_return_value}" "${member}"
}

# Define a set_intersection function returning the intersection of two sets.
# Uses dict_for_each to append any values in 2nd set also in 1st set to the
# result which is initially an empty set. dict_for_each is also passed the
# 1st operand set as an additional parameter to pass to each operation
# function call. Returns the resultant intersection set in set_return_value.
set_intersection() {
  set_declare
  dict_for_each "${2}" set_intersection_op "${1}"
}

# Define set_intersection_op the set_intersection per-member operation function.
# Called by dict_for_each for each of the members of the 2nd operand that
# set_intersection passes to dict_for_each. dict_for_each also passes the
# whole set intersection 1st operand set. A value is added to the resultant
# intersection set if it is in both the 1st operand set and the 2nd operand
# set, checked by seeing if the 1st operand set contains the 2nd operand set
# member value and if so the value is added to the result set in
# set_return_value.
set_intersection_op() {
  local member_of_2="${1}"
  local set_1="${4}"
  if set_contains "${set_1}" "${member_of_2}"; then
    set_add_members "${set_return_value}" "${member_of_2}"
  fi
}

# Define a set_print function that formats and outputs set objects to stdout.
# Sets up print specification for dict_pretty_print and passes the set
# and specification to dict_pretty_print.
#
# The format is that used by Python sets:
#
#   { 'member-1', 'member-2', ..., 'member-N' }
set_print() {
  # Use backspace character as dict value suffix to backspace over
  # the dummy '_' set values. 
  local readonly ASCII_BS=$(printf '\010')
  local print_spec="$( dict_declare_simple \
                       'dict_prefix' '{ ' \
                       'dict_suffix' ' }' \
                       'record_separator' ', ' \
                       'key_prefix' "'" \
                       'key_suffix' "'" \
                       'value_suffix' "${ASCII_BS}" \
                     )"
  dict_pretty_print "${1}" "${print_spec}"
}

#
# Using the set functions
# 

# Create and display a couple of sets:
set_declare 'Kayla' 'Johnny' 'Alexis' 'Bobby' 'Rose' 'Louis' 'Charlotte' 'Elijah'
friends="${set_return_value}"
set_declare 'Rose' 'Russell' 'Charlotte' 'Vincent' 'Natalie' 'Johnny' 'Brittany' 'Bobby'
collegues="${set_return_value}"
printf '%s' 'My  friends  are: '
set_print "${friends}"
printf '\n%s' 'My collegues are: '
set_print "${collegues}"
printf '\n\n'

# Add some new friends using set_add_members:
printf '%s\n' 'I have new friends Eugene and Diana!'
set_add_members "${friends}" 'Eugene' 'Diana'
friends="${set_return_value}"
printf '%s' 'My  friends  are now: '
set_print "${friends}"

# Add some new collegues contained in a set, added to existing friends
# using set_union:
set_declare 'Diana' 'Randy'
new_collegues="${set_return_value}"
printf '\n\n%s' 'New people '
set_print "${new_collegues}"
printf '%s' ' have just started on my team at work.'
set_union "${collegues}" "${new_collegues}"
collegues="${set_return_value}"
printf '\n%s' 'My collegues are now: '
set_print "${collegues}"
printf '\n\n'

# Obtain set of all friends and collegues. Some are both and therefore
# should only appear once. Thus we require the union of friends and collegues:
set_union "${friends}" "${collegues}"
all_friends_and_collegues="${set_return_value}"
printf '%s' 'All my friends and collegues are '
set_print "${all_friends_and_collegues}"
printf '\n'

# Obtain set of people who are both friend and collegue using set_intersection:
set_intersection "${friends}" "${collegues}"
both_friend_and_collegue="${set_return_value}"
printf '%s' 'My friends who are also collegues are '
set_print "${both_friend_and_collegue}"
printf '\n'
