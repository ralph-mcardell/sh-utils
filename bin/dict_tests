#!/bin/sh
# Copyright (c) 2022 Ralph. E. McArdell
# All rights reserved.
# Licensed under BSD 2-Clause License - see LICENSE.md for full text.

echo "====================================================="
echo ">>>>>>>>>>>>>>>>>> DICT TESTS <<<<<<<<<<<<<<<<<<<<<<<"
echo "====================================================="

EXEC_DIR=`realpath $(dirname "$0")` || {
   echo "No realpath; falling back to setting EXEC_DIR with cd dirname \"\$0\" && pwd -P."
   EXEC_DIR=$(cd $(dirname "$0") && pwd -P)
}

WORK_DIR=`realpath "${EXEC_DIR}/.."` || {
   echo "No realpath; falling back to setting WORK_DIR with cd \"\${EXEC_DIR}/..\" && pwd -P."
   WORK_DIR=$(cd "${EXEC_DIR}/.." && pwd -P)
}

LIB_DIR="${WORK_DIR}/lib"

. ${LIB_DIR}/dict.sh
. ${LIB_DIR}/sh_test.sh

# Check we can 'include' dict more than once safely
. ${LIB_DIR}/dict.sh

__TEST_NL__='
'
__TEST_CR__=$(echo '@' | tr '@' '\015')

empty_string_is_not_a_dict() {
  local notdict=''
  local is_dict="dict_is_dict  ${notdict}";
  REQUIRE_FALSE "${is_dict}"
}

arbitrary_string_is_not_a_dict() {
  local notdict='arbitrary_string'
  local is_dict="dict_is_dict  ${notdict}";
  REQUIRE_FALSE "${is_dict}"
}

declared_dict_variable_is_a_dict() {
  dict=$(dict_declare)
  local is_dict="dict_is_dict  "${dict}"";
  REQUIRE "${is_dict}"
}

non_dict_variables_are_not_tolerated() {
  # checking $? only works if value not placed in local variable viz:
  gret=$(dict_set '' "${key}" "${expected}" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${gret}" 'not' 'dict'
  unset gret
# or local declared 1st then set:
  local ret
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_set "${notdict}" "key2" "something" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_set_simple "${notdict}" "key2" "something-simple" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_get "${notdict}" "key" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_get_simple "${notdict}" "key" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_remove "${notdict}" "key" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_for_each "${notdict}" "key" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  notdict="key${__DICT_FIELD_SEPARATOR__}value${__DICT_ENTRY_SEPARATOR__}"
  ret=$(dict_size "${notdict}" 2>&1) 
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  ret=$(dict_pretty_print "${notdict}" "${notdict}" 2>&1)
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
  ret=$(dict_pretty_print "$(dict_declare_simple)" "${notdict}" 2>&1) 
  CHECK $? -eq 1
  CHECK_CONTAINS_ALL "${ret}" 'not' 'dict'
}

cannot_retrieve_values_from_empty_dict() {
  local dict=$(dict_declare)
  REQUIRE "$(dict_count "${dict}")" -eq "0"
  REQUIRE "$(dict_size "${dict}")" -eq "0"
  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
  local dict2=$(dict_declare_simple)
  CHECK "$(dict_get "${dict2}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict2}" 'some_key')x" = "x"
}

can_add_multiple_initial_values_on_dict_declaration() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  dict=$(dict_declare "${key1}" "${expected1}" \
                      "${key2}" "${expected2}" "${key3}" "${expected3}")

  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_size "${dict}")" -eq "3"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
}

can_add_multiple_initial_simple_values_only_on_dict_declaration() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  dict=$(dict_declare_simple "${key1}" "${expected1}" \
                             "${key2}" "${expected2}" "${key3}" "${expected3}")
  REQUIRE "$(dict_size "${dict}")" -eq "3"
  REQUIRE "$(dict_count "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
}

cannot_set_duplicate_keys_in_dict_declaration() {
  local ret
  ret=$(dict_declare "K" "V" "K" "VV" 2>&1)
  CHECK $? -eq 1
  local is_dict="dict_is_dict ${ret}"
  CHECK_FALSE "${is_dict}"
  CHECK_CONTAINS_ALL "${ret}" "ERROR" 'duplicate' 'key'

  ret=$(dict_declare_simple "K" "V" "K" "VV" 2>&1)
  CHECK $? -eq 1
  is_dict="dict_is_dict ${ret}"
  CHECK_FALSE "${is_dict}"
  CHECK_CONTAINS_ALL "${ret}" "ERROR" 'duplicate' 'key'
}

can_set_keys_duplicated_in_part_in_dict_declaration() {
  local ret
  ret=$(dict_declare "K" "V" "Kk" "Vv" "kKk" "vVv" "kK" "vV" "k" "v")
  CHECK $? -eq 0
  local is_dict="dict_is_dict ${ret}"
  CHECK "${is_dict}"
  CHECK "$(dict_size "${ret}")" -eq "5"

  ret=$(dict_declare_simple "K" "V" "Kk" "Vv" "kKk" "vVv" "kK" "vV" "k" "v")
  CHECK $? -eq 0
  is_dict="dict_is_dict ${ret}"
  CHECK "${is_dict}"
  CHECK "$(dict_size "${ret}")" -eq "5"
}

can_retrieve_just_the_value_for_key_for_dict_containing_single_entry() {
  local expected='value 1'
  local key='key1'

  local dict="$(dict_set $(dict_declare) "${key}" "${expected}")"
  REQUIRE "$(dict_count "${dict}")" -eq "1"
  REQUIRE "$(dict_size "${dict}")" -eq "1"

# Pass dict_get result directly inline with call to CHECK
  CHECK "$(dict_get "${dict}" "${key}")i" = "${expected}i"
  CHECK "$(dict_get_simple "${dict}" "${key}")i" = "${expected}i"

# Pass dict_get result via intermediate variable to call to CHECK
  local actual="$(dict_get "${dict}" "${key}")"
  CHECK "${actual}v" = "${expected}v"
  local actual="$(dict_get_simple "${dict}" "${key}")"
  CHECK "${actual}v" = "${expected}v"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
}

can_retrieve_just_the_values_for_keys_for_dict_containing_multiple_entries() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

# can add entries to dict when declared or by dict_set/dict_set_simple
  local dict="$(dict_declare_simple "${key1}" "${expected1}")"
  dict="$(dict_set_simple "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"
  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
}

can_set_multilple_entries_in_single_call_dict_set_simple() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

  local dict="$(dict_declare_simple)"
  dict="$(dict_set_simple "${dict}" "${key1}" "${expected1}" "${key2}" "${expected2}" "${key3}" "${expected3}")"
  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
}

can_set_multilple_entries_in_single_call_dict_set() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

  local dict="$(dict_declare_simple)"
  dict="$(dict_set "${dict}" "${key1}" "${expected1}" "${key2}" "${expected2}" "${key3}" "${expected3}")"
  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
}

can_retrieve_the_value_for_key_for_dict_containing_newlines() {
  local expected='value
1

'
  local key='key1'
  local dict="$(dict_set $(dict_declare) "${key}" "${expected}")"
  REQUIRE "$(dict_size "${dict}")" -eq "1"

# Pass dict_get result directly inline with call to CHECK
# NOTE: that trailing newlines are stripped from command expansions as per
# POSIX shell standard :(
# Hence the special handling to add a trailing character on. Below shows
# removing this when getting result into a variable.
# Carriage return is used as this is probably not already in the string. Other
# options could be one of the non-printable ASCII separator characters used
# in dicts as these are not allowed in dict values.
  CHECK "$(dict_get "${dict}" "${key}"; echo "${__TEST_CR__}")i" = "${expected}${__TEST_CR__}i"
  CHECK "$(dict_get_simple "${dict}" "${key}"; echo "${__TEST_CR__}")is" = "${expected}${__TEST_CR__}is"

# Pass dict_get result via intermediate variable to call to CHECK
  local actual="$(dict_get "${dict}" "${key}"; echo "${__TEST_CR__}")"
  actual="${actual%"${__TEST_CR__}"}"
  CHECK "${actual}v" = "${expected}v"
  local actual="$(dict_get_simple "${dict}" "${key}"; echo "${__TEST_CR__}")"
  actual="${actual%"${__TEST_CR__}"}"
  CHECK "${actual}vs" = "${expected}vs"
}

can_update_values_of_previously_added_entries_using_dict_set() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  local dict="$(dict_declare  \
    "${key1}" "PLACEHOLDER 1" \
    "${key2}" "PLACEHOLDER 2" \
    "${key3}" "PLACEHOLDER 3")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  CHECK "$(dict_size "${dict}")" -eq "3"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get "${dict}" 'some_key')x" = "x"
}

can_update_values_of_previously_added_entries_using_dict_set_simple() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  local dict="$(dict_declare_simple  \
    "${key1}" "PLACEHOLDER 1" \
    "${key2}" "PLACEHOLDER 2" \
    "${key3}" "PLACEHOLDER 3")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  dict="$(dict_set_simple "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set_simple "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set_simple "${dict}" "${key3}" "${expected3}")"

  CHECK "$(dict_size "${dict}")" -eq "3"
  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" 'some_key')x" = "x"
}

can_add_retrieve_values_with_keys_tails_of_other_keys() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='firstkey'
  local key2='key'
  local key3='lastkey'
  local dict="$(dict_declare  \
    "${key1}" "${expected1}" \
    "${key2}" "${expected2}" \
    "${key3}" "${expected3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"
}

can_add_retrieve_values_with_keys_heads_of_other_keys() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key'
  local key3='key3'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"
}

can_add_retrieve_values_with_keys_contained_in_other_keys() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='1key1'
  local key2='key'
  local key3='3key3'
  local dict=$(dict_declare)
  dict="$(dict_set_simple "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set_simple "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set_simple "${dict}" "${key3}" "${expected3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"
  REQUIRE "$(dict_count "${dict}")" -eq "3"

  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  CHECK "$(dict_get_simple "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get_simple "${dict}" "${key2}")B" = "${expected2}B"
  CHECK "$(dict_get_simple "${dict}" "${key3}")C" = "${expected3}C"
}

can_add_and_retrieve_entries_correctly_with_key_values_within_values() {
  local keyvalue='key_value'
  local beforeprefixkey="beforeprefix"
  local beforesuffixkey="beforesuffix"
  local aftersuffixkey="aftersuffix"
  local afterprefixkey="afterprefix"
  local dict=$(dict_declare)

  dict="$(dict_set "${dict}" "${beforeprefixkey}" "${beforeprefixkey}${keyvalue}")"
  dict="$(dict_set "${dict}" "${beforesuffixkey}" "${keyvalue}${beforesuffixkey}")"
  dict="$(dict_set "${dict}" "${keyvalue}" "${keyvalue}")"
  dict="$(dict_set "${dict}" "${aftersuffixkey}" "${keyvalue}${aftersuffixkey}")"
  dict="$(dict_set "${dict}" "${afterprefixkey}" "${afterprefixkey}${keyvalue}")"
  REQUIRE "$(dict_size "${dict}")" -eq "5"
  CHECK "$(dict_get "${dict}" "${keyvalue}")B" = "${keyvalue}B"
  CHECK "$(dict_get "${dict}" "${beforeprefixkey}")B" = "${beforeprefixkey}${keyvalue}B"
  CHECK "$(dict_get "${dict}" "${beforesuffixkey}")B" = "${keyvalue}${beforesuffixkey}B"
  CHECK "$(dict_get "${dict}" "${aftersuffixkey}")B" = "${keyvalue}${aftersuffixkey}B"
  CHECK "$(dict_get "${dict}" "${afterprefixkey}")B" = "${afterprefixkey}${keyvalue}B"
}

can_add_update_and_retrieve_entries_correctly_with_key_values_within_values() {
  local keyvalue='key_value'
  local beforeprefixkey="beforeprefix"
  local beforesuffixkey="beforesuffix"
  local aftersuffixkey="aftersuffix"
  local afterprefixkey="afterprefix"
  local dict=$(dict_declare)

  dict="$(dict_set "${dict}" "${beforeprefixkey}" "${beforeprefixkey}PLACEHOLDER")"
  dict="$(dict_set "${dict}" "${beforesuffixkey}" "PLACEHOLDER${beforesuffixkey}")"
  dict="$(dict_set "${dict}" "${keyvalue}" "${keyvalue}")"
  dict="$(dict_set "${dict}" "${aftersuffixkey}" "PLACEHOLDER${aftersuffixkey}")"
  dict="$(dict_set "${dict}" "${afterprefixkey}" "${afterprefixkey}PLACEHOLDER")"
  REQUIRE "$(dict_size "${dict}")" -eq "5"

  dict="$(dict_set "${dict}" "${beforeprefixkey}" "${beforeprefixkey}${keyvalue}")"
  dict="$(dict_set "${dict}" "${beforesuffixkey}" "${keyvalue}${beforesuffixkey}")"
  dict="$(dict_set "${dict}" "${aftersuffixkey}" "${keyvalue}${aftersuffixkey}")"
  dict="$(dict_set "${dict}" "${afterprefixkey}" "${afterprefixkey}${keyvalue}")"
  CHECK "$(dict_size "${dict}")" -eq "5"

  CHECK "$(dict_get "${dict}" "${keyvalue}")B" = "${keyvalue}B"

  CHECK "$(dict_get "${dict}" "${beforeprefixkey}")B" = "${beforeprefixkey}${keyvalue}B"
  CHECK "$(dict_get "${dict}" "${beforesuffixkey}")B" = "${keyvalue}${beforesuffixkey}B"
  CHECK "$(dict_get "${dict}" "${aftersuffixkey}")B" = "${keyvalue}${aftersuffixkey}B"
  CHECK "$(dict_get "${dict}" "${afterprefixkey}")B" = "${afterprefixkey}${keyvalue}B"
}

can_remove_whole_entry_specified_by_key_from_dict() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  REQUIRE "$(dict_size "${dict}")" -eq "3"
  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  dict="$(dict_remove "${dict}" "${key2}")"
  CHECK "$(dict_size "${dict}")" -eq "2"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"

  dict="$(dict_remove "${dict}" "${key3}")"
  CHECK "$(dict_size "${dict}")" -eq "1"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "C"

  dict="$(dict_remove "${dict}" "${key1}")"
  CHECK "$(dict_size "${dict}")" -eq "0"
  CHECK "$(dict_count "${dict}")" -eq "0"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "C"
}

added_nested_dict_values_can_be_retrieved_correctly() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

  local dict_2_1=$(dict_declare)
  dict_2_1="$(dict_set "${dict_2_1}" "${key1}2_1" "${expected1}2_1")"
  dict_2_1="$(dict_set "${dict_2_1}" "${key2}2_1" "${expected2}2_1")"
  dict_2_1="$(dict_set "${dict_2_1}" "${key3}2_1" "${expected3}2_1")"
  REQUIRE "$(dict_size "${dict_2_1}")" -eq "3"
  local dict_2_2=$(dict_declare)
  dict_2_2="$(dict_set "${dict_2_2}" "${key1}2_2" "${expected1}2_2")"
  dict_2_2="$(dict_set "${dict_2_2}" "${key2}2_2" "${expected2}2_2")"
  dict_2_2="$(dict_set "${dict_2_2}" "${key3}2_2" "${expected3}2_2")"
  REQUIRE "$(dict_size "${dict_2_2}")" -eq "3"
  local dict_2_3=$(dict_declare)
  dict_2_3="$(dict_set "${dict_2_3}" "${key1}2_3" "${expected1}2_3")"
  dict_2_3="$(dict_set "${dict_2_3}" "${key2}2_3" "${expected2}2_3")"
  dict_2_3="$(dict_set "${dict_2_3}" "${key3}2_3" "${expected3}2_3")"
  REQUIRE "$(dict_size "${dict_2_3}")" -eq "3"

  local dict_1_1=$(dict_declare)
  dict_1_1="$(dict_set "${dict_1_1}" "${key1}1_1" "${expected1}1_1")"
  dict_1_1="$(dict_set "${dict_1_1}" "${key2}1_1" "${expected2}1_1")"
  dict_1_1="$(dict_set "${dict_1_1}" "${key3}1_1" "${expected3}1_1")"
  REQUIRE "$(dict_size "${dict_1_1}")" -eq "3"
  local dict_1_2=$(dict_declare)
  dict_1_2="$(dict_set "${dict_1_2}" "${key1}1_2" "${expected1}1_2")"
  dict_1_2="$(dict_set "${dict_1_2}" "${key2}1_2" "${expected2}1_2")"
  dict_1_2="$(dict_set "${dict_1_2}" "${key3}1_2" "${expected3}1_2")"
  REQUIRE "$(dict_size "${dict_1_2}")" -eq "3"
  local dict_1_3=$(dict_declare)
  dict_1_3="$(dict_set "${dict_1_3}" "${key1}1_3" "${dict_2_1}")"
  dict_1_3="$(dict_set "${dict_1_3}" "${key2}1_3" "${dict_2_2}")"
  dict_1_3="$(dict_set "${dict_1_3}" "${key3}1_3" "${dict_2_3}")"
  REQUIRE "$(dict_size "${dict_1_3}")" -eq "3"

  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${dict_1_1}")"
  dict="$(dict_set "${dict}" "${key2}" "${dict_1_2}")"
  dict="$(dict_set "${dict}" "${key3}" "${dict_1_3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  v="$(dict_get "${dict}" "${key1}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"
  CHECK "$(dict_get "${v}" "${key1}1_1")A" = "${expected1}1_1A"
  CHECK "$(dict_get "${v}" "${key2}1_1")A" = "${expected2}1_1A"
  CHECK "$(dict_get "${v}" "${key3}1_1")A" = "${expected3}1_1A"

  v="$(dict_get "${dict}" "${key2}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"
  CHECK "$(dict_get "${v}" "${key1}1_2")A" = "${expected1}1_2A"
  CHECK "$(dict_get "${v}" "${key2}1_2")A" = "${expected2}1_2A"
  CHECK "$(dict_get "${v}" "${key3}1_2")A" = "${expected3}1_2A"

  v="$(dict_get "${dict}" "${key3}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"

  vv="$(dict_get "${v}" "${key1}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_1")A" = "${expected1}2_1A"
  CHECK "$(dict_get "${vv}" "${key2}2_1")A" = "${expected2}2_1A"
  CHECK "$(dict_get "${vv}" "${key3}2_1")A" = "${expected3}2_1A"

  vv="$(dict_get "${v}" "${key2}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_count "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_2")A" = "${expected1}2_2A"
  CHECK "$(dict_get "${vv}" "${key2}2_2")A" = "${expected2}2_2A"
  CHECK "$(dict_get "${vv}" "${key3}2_2")A" = "${expected3}2_2A"

  vv="$(dict_get "${v}" "${key3}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_3")A" = "${expected1}2_3A"
  CHECK "$(dict_get "${vv}" "${key2}2_3")A" = "${expected2}2_3A"
  CHECK "$(dict_get "${vv}" "${key3}2_3")A" = "${expected3}2_3A"
}

initialised_nested_dict_values_can_be_retrieved_correctly() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

  local dict_2_1="$(dict_declare \
    "${key1}2_1" "${expected1}2_1" \
    "${key2}2_1" "${expected2}2_1" \
    "${key3}2_1" "${expected3}2_1")"
  REQUIRE "$(dict_size "${dict_2_1}")" -eq "3"
  local dict_2_2="$(dict_declare_simple \
    "${key1}2_2" "${expected1}2_2" \
    "${key2}2_2" "${expected2}2_2" \
    "${key3}2_2" "${expected3}2_2")"
  REQUIRE "$(dict_size "${dict_2_2}")" -eq "3"
  local dict_2_3="$(dict_declare_simple \
    "${key1}2_3" "${expected1}2_3" \
    "${key2}2_3" "${expected2}2_3" \
    "${key3}2_3" "${expected3}2_3")"
  REQUIRE "$(dict_size "${dict_2_3}")" -eq "3"

  local dict_1_1="$(dict_declare \
    "${key1}1_1" "${expected1}1_1" \
    "${key2}1_1" "${expected2}1_1" \
    "${key3}1_1" "${expected3}1_1")"
  REQUIRE "$(dict_size "${dict_1_1}")" -eq "3"
  local dict_1_2="$(dict_declare_simple \
    "${key1}1_2" "${expected1}1_2" \
    "${key2}1_2" "${expected2}1_2" \
    "${key3}1_2" "${expected3}1_2")"
  REQUIRE "$(dict_size "${dict_1_2}")" -eq "3"
  local dict_1_3="$(dict_declare \
    "${key1}1_3" "${dict_2_1}" \
    "${key2}1_3" "${dict_2_2}" \
    "${key3}1_3" "${dict_2_3}")"
  REQUIRE "$(dict_size "${dict_1_3}")" -eq "3"

  local dict="$(dict_declare \
    "${key1}" "${dict_1_1}" \
    "${key2}" "${dict_1_2}" \
    "${key3}" "${dict_1_3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"

  v="$(dict_get "${dict}" "${key1}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"
  CHECK "$(dict_get "${v}" "${key1}1_1")A" = "${expected1}1_1A"
  CHECK "$(dict_get "${v}" "${key2}1_1")A" = "${expected2}1_1A"
  CHECK "$(dict_get "${v}" "${key3}1_1")A" = "${expected3}1_1A"

  v="$(dict_get "${dict}" "${key2}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"
  CHECK "$(dict_get "${v}" "${key1}1_2")A" = "${expected1}1_2A"
  CHECK "$(dict_get "${v}" "${key2}1_2")A" = "${expected2}1_2A"
  CHECK "$(dict_get "${v}" "${key3}1_2")A" = "${expected3}1_2A"

  v="$(dict_get "${dict}" "${key3}")"
  REQUIRE -n "${v}"
  CHECK "$(dict_size "${v}")" -eq "3"

  vv="$(dict_get "${v}" "${key1}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_1")A" = "${expected1}2_1A"
  CHECK "$(dict_get "${vv}" "${key2}2_1")A" = "${expected2}2_1A"
  CHECK "$(dict_get "${vv}" "${key3}2_1")A" = "${expected3}2_1A"

  vv="$(dict_get "${v}" "${key2}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_count "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_2")A" = "${expected1}2_2A"
  CHECK "$(dict_get "${vv}" "${key2}2_2")A" = "${expected2}2_2A"
  CHECK "$(dict_get "${vv}" "${key3}2_2")A" = "${expected3}2_2A"

  vv="$(dict_get "${v}" "${key3}1_3")"
  REQUIRE -n "${vv}"
  CHECK "$(dict_size "${vv}")" -eq "3"
  CHECK "$(dict_get "${vv}" "${key1}2_3")A" = "${expected1}2_3A"
  CHECK "$(dict_get "${vv}" "${key2}2_3")A" = "${expected2}2_3A"
  CHECK "$(dict_get "${vv}" "${key3}2_3")A" = "${expected3}2_3A"
}

nested_dict_values_can_be_removed_correctly() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'

  local dict_2_1="$(dict_declare \
    "${key1}2_1" "${expected1}2_1" \
    "${key2}2_1" "${expected2}2_1" \
    "${key3}2_1" "${expected3}2_1")"
  REQUIRE "$(dict_size "${dict_2_1}")" -eq "3"
  local dict_2_2="$(dict_declare_simple \
    "${key1}2_2" "${expected1}2_2" \
    "${key2}2_2" "${expected2}2_2" \
    "${key3}2_2" "${expected3}2_2")"
  REQUIRE "$(dict_size "${dict_2_2}")" -eq "3"
  local dict_2_3=$(dict_declare)
  dict_2_3="$(dict_set "${dict_2_3}" "${key1}2_3" "${expected1}2_3")"
  dict_2_3="$(dict_set "${dict_2_3}" "${key2}2_3" "${expected2}2_3")"
  dict_2_3="$(dict_set "${dict_2_3}" "${key3}2_3" "${expected3}2_3")"
  REQUIRE "$(dict_size "${dict_2_3}")" -eq "3"

  local dict_1_1=$(dict_declare)
  dict_1_1="$(dict_set_simple "${dict_1_1}" "${key1}1_1" "${expected1}1_1")"
  dict_1_1="$(dict_set_simple "${dict_1_1}" "${key2}1_1" "${expected2}1_1")"
  dict_1_1="$(dict_set_simple "${dict_1_1}" "${key3}1_1" "${expected3}1_1")"
  REQUIRE "$(dict_size "${dict_1_1}")" -eq "3"
  local dict_1_2=$(dict_declare_simple)
  dict_1_2="$(dict_set_simple "${dict_1_2}" "${key1}1_2" "${expected1}1_2")"
  dict_1_2="$(dict_set_simple "${dict_1_2}" "${key2}1_2" "${expected2}1_2")"
  dict_1_2="$(dict_set_simple "${dict_1_2}" "${key3}1_2" "${expected3}1_2")"
  REQUIRE "$(dict_size "${dict_1_2}")" -eq "3"
  local dict_1_3=$(dict_declare_simple)
  dict_1_3="$(dict_set "${dict_1_3}" "${key1}1_3" "${dict_2_1}")"
  dict_1_3="$(dict_set "${dict_1_3}" "${key2}1_3" "${dict_2_2}")"
  dict_1_3="$(dict_set "${dict_1_3}" "${key3}1_3" "${dict_2_3}")"
  REQUIRE "$(dict_size "${dict_1_3}")" -eq "3"

  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${dict_1_1}")"
  dict="$(dict_set "${dict}" "${key2}" "${dict_1_2}")"
  dict="$(dict_set "${dict}" "${key3}" "${dict_1_3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "3"
  REQUIRE "$(dict_count "${dict}")" -eq "3"
  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${dict_1_1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${dict_1_2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${dict_1_3}C"

  dict="$(dict_remove "${dict}" "${key2}")"
  REQUIRE "$(dict_size "${dict}")" -eq "2"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${dict_1_1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "${dict_1_3}C"

  dict="$(dict_remove "${dict}" "${key3}")"
  REQUIRE "$(dict_size "${dict}")" -eq "1"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "${dict_1_1}A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "C"

  dict="$(dict_remove "${dict}" "${key1}")"
  REQUIRE "$(dict_size "${dict}")" -eq "0"
  REQUIRE "$(dict_count "${dict}")" -eq "0"
  CHECK "$(dict_get "${dict}" "${key1}")A" = "A"
  CHECK "$(dict_get "${dict}" "${key2}")B" = "B"
  CHECK "$(dict_get "${dict}" "${key3}")C" = "C"
}

can_create_variable_of_key_name_with_associated_value_for_each_dict_entry() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='__key1__'
  local key2='__key2__'
  local key3='__key3__'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  REQUIRE "$(dict_size "${dict}")" -eq "3"
  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"
  # Check we do not have variables defined already
  REQUIRE -z "${__key1__:+x}"
  REQUIRE -z "${__key2__:+x}"
  REQUIRE -z "${__key3__:+x}"

  dict_for_each "${dict}" dict_op_to_var_flat

  REQUIRE -n "${__key1__:+x}"
  REQUIRE -n "${__key2__:+x}"
  REQUIRE -n "${__key3__:+x}"
  CHECK "${__key1__}A" = "${expected1}A"
  CHECK "${__key2__}B" = "${expected2}B"
  CHECK "${__key3__}C" = "${expected3}C"
  unset __key1__
  unset __key2__
  unset __key3__
}

can_create_variable_of_key_name_with_associated_nested_dict_value_for_each_dict_entry() {
  local keyi11="__keyi1__"
  local keyi12="__keyi2__"
  local valuei11="value i 1 1"
  local valuei12="value i _ 2"
  local inner1="$(dict_declare_simple "${keyi11}" "${valuei11}" "${keyi12}" "${valuei12}")"
  local keyi21="__keyi1__"
  local keyi22="__keyi2__"
  local valuei21="value i 2 1"
  local valuei22="value i _ 2"
  local inner2="$(dict_declare_simple "${keyi21}" "${valuei21}" "${keyi22}" "${valuei22}")"

  local keym11="__keym1__"
  local keym12="__keym2__"
  local keym13="__keym3__"
  local valuem11="value m 1 1"
  local valuem13="value m _ _"
  local mid1="$(dict_declare "${keym11}" "${valuem11}" "${keym12}" "${inner1}" "${keym13}" "${valuem13}")"
  local keym21="__keym1__"
  local keym22="__keym2__"
  local keym23="__keym3__"
  local keym24="__keym4__"
  local valuem22="value m _ _"
  local valuem23="value m 2 3"
  local mid2="$(dict_declare "${keym21}" "${inner1}" "${keym22}" "${valuem22}" "${keym23}" "${valuem23}" "${keym24}"  "${inner2}")"

  local keyo1="__keyo1__"
  local keyo2="__keyo2__"
  local keyo3="__keyo3__"
  local keyo4="__keyo4__"
  local valueo1="value o one"
  local valueo4="value o four"
  local outer="$(dict_declare "${keyo1}"  "${valueo1}"  "${keyo2}" "${mid1}" "${keyo3}" "${mid2}" "${keyo4}"  "${valueo4}")"

  REQUIRE "$(dict_get "${outer}" "${keyo1}")A" = "${valueo1}A"
  REQUIRE "$(dict_get "${outer}" "${keyo2}")B" = "${mid1}B"
  REQUIRE "$(dict_get "${outer}" "${keyo3}")C" = "${mid2}C"
  REQUIRE "$(dict_get "${outer}" "${keyo4}")D" = "${valueo4}D"
  # Check we do not have variables defined already
  REQUIRE -z "${__keyo1__:+x}"
  REQUIRE -z "${__keyo2__:+x}"
  REQUIRE -z "${__keyo3__:+x}"
  REQUIRE -z "${__keyo4__:+x}"

  dict_for_each "${outer}" dict_op_to_var_flat

  REQUIRE -n "${__keyo1__:+x}"
  REQUIRE -n "${__keyo2__:+x}"
  REQUIRE -n "${__keyo3__:+x}"
  REQUIRE -n "${__keyo4__:+x}"
  CHECK "${__keyo1__}A" = "${valueo1}A"
  CHECK "${__keyo2__}B" = "${mid1}B"
  CHECK "${__keyo3__}C" = "${mid2}C"
  CHECK "${__keyo4__}D" = "${valueo4}D"
  unset __keyo1__
  unset __keyo4__

  REQUIRE "$(dict_get "${__keyo2__}" "${keym11}")A" = "${valuem11}A"
  REQUIRE "$(dict_get "${__keyo2__}" "${keym12}")B" = "${inner1}B"
  REQUIRE "$(dict_get "${__keyo2__}" "${keym13}")C" = "${valuem13}C"
  # Check we do not have variables defined already
  REQUIRE -z "${__keym1__:+x}"
  REQUIRE -z "${__keym2__:+x}"
  REQUIRE -z "${__keym3__:+x}"

  dict_for_each "${__keyo2__}" dict_op_to_var_flat
  unset __keyo2__

  REQUIRE -n "${__keym1__:+x}"
  REQUIRE -n "${__keym2__:+x}"
  REQUIRE -n "${__keym3__:+x}"
  CHECK "${__keym1__}A" = "${valuem11}A"
  CHECK "${__keym2__}B" = "${inner1}B"
  CHECK "${__keym3__}C" = "${valuem13}C"
  unset __keym1__
  unset __keym3__

  REQUIRE "$(dict_get "${__keym2__}" "${keyi11}")A" = "${valuei11}A"
  REQUIRE "$(dict_get "${__keym2__}" "${keyi12}")B" = "${valuei12}B"
  # Check we do not have variables defined already
  REQUIRE -z "${__keyi1__:+x}"
  REQUIRE -z "${__keyi2__:+x}"

  dict_for_each "${__keym2__}" dict_op_to_var_flat
  unset __keym2__

  REQUIRE -n "${__keyi1__:+x}"
  REQUIRE -n "${__keyi2__:+x}"
  CHECK "${__keyi1__}A" = "${valuei11}A"
  CHECK "${__keyi2__}B" = "${valuei12}B"
  unset __keyi1__
  unset __keyi2__

  REQUIRE "$(dict_get "${__keyo3__}" "${keym21}")A" = "${inner1}A"
  REQUIRE "$(dict_get "${__keyo3__}" "${keym22}")B" = "${valuem22}B"
  REQUIRE "$(dict_get "${__keyo3__}" "${keym23}")C" = "${valuem23}C"
  REQUIRE "$(dict_get "${__keyo3__}" "${keym24}")D" = "${inner2}D"
  # Check we do not have variables defined already
  REQUIRE -z "${__keym1__:+x}"
  REQUIRE -z "${__keym2__:+x}"
  REQUIRE -z "${__keym3__:+x}"
  REQUIRE -z "${__keym4__:+x}"

  dict_for_each "${__keyo3__}" dict_op_to_var_flat
  unset __keyo3__

  REQUIRE -n "${__keym1__:+x}"
  REQUIRE -n "${__keym2__:+x}"
  REQUIRE -n "${__keym3__:+x}"
  REQUIRE -n "${__keym4__:+x}"
  CHECK "${__keym1__}A" = "${inner1}A"
  CHECK "${__keym2__}B" = "${valuem22}B"
  CHECK "${__keym3__}C" = "${valuem23}C"
  CHECK "${__keym4__}D" = "${inner2}D"
  unset __keym2__
  unset __keym3__

  REQUIRE "$(dict_get "${__keym1__}" "${keyi11}")A" = "${valuei11}A"
  REQUIRE "$(dict_get "${__keym1__}" "${keyi12}")B" = "${valuei12}B"
  # Check we do not have variables defined already
  REQUIRE -z "${__keyi1__:+x}"
  REQUIRE -z "${__keyi2__:+x}"

  dict_for_each "${__keym1__}" dict_op_to_var_flat
  unset __keym1__

  REQUIRE -n "${__keyi1__:+x}"
  REQUIRE -n "${__keyi2__:+x}"
  CHECK "${__keyi1__}A" = "${valuei11}A"
  CHECK "${__keyi2__}B" = "${valuei12}B"
  unset __keyi1__
  unset __keyi2__

  REQUIRE "$(dict_get "${__keym4__}" "${keyi21}")A" = "${valuei21}A"
  REQUIRE "$(dict_get "${__keym4__}" "${keyi22}")B" = "${valuei22}B"
  # Check we do not have variables defined already
  REQUIRE -z "${__keyi1__:+x}"
  REQUIRE -z "${__keyi2__:+x}"

  dict_for_each "${__keym4__}" dict_op_to_var_flat
  unset __keym4__

  REQUIRE -n "${__keyi1__:+x}"
  REQUIRE -n "${__keyi2__:+x}"
  CHECK "${__keyi1__}A" = "${valuei21}A"
  CHECK "${__keyi2__}B" = "${valuei22}B"
  unset __keyi1__
  unset __keyi2__
}

can_create_variable_of_key_name_with_prefix_and_suffix_with_associated_value_for_each_dict_entry() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"
  # Check we do not have variables defined already
  REQUIRE -z "${__pkey1s__:+x}"
  REQUIRE -z "${__pkey2s__:+x}"
  REQUIRE -z "${__pkey3s__:+x}"

  dict_for_each "${dict}" dict_op_to_var_flat "__p" "s__"

  REQUIRE -n "${__pkey1s__:+x}"
  REQUIRE -n "${__pkey2s__:+x}"
  REQUIRE -n "${__pkey3s__:+x}"
  CHECK "${__pkey1s__}A" = "${expected1}A"
  CHECK "${__pkey2s__}B" = "${expected2}B"
  CHECK "${__pkey3s__}C" = "${expected3}C"
  unset __pkey1s__
  unset __pkey2s__
  unset __pkey3s__
}

can_create_variable_of_key_name_with_prefix_with_associated_value_for_each_dict_entry() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1__'
  local key2='key2__'
  local key3='key3__'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"
  # Check we do not have variables defined already
  REQUIRE -z "${__pkey1__:+x}"
  REQUIRE -z "${__pkey2__:+x}"
  REQUIRE -z "${__pkey3__:+x}"

  dict_for_each "${dict}" dict_op_to_var_flat "__p"

  REQUIRE -n "${__pkey1__:+x}"
  REQUIRE -n "${__pkey2__:+x}"
  REQUIRE -n "${__pkey3__:+x}"
  CHECK "${__pkey1__}A" = "${expected1}A"
  CHECK "${__pkey2__}B" = "${expected2}B"
  CHECK "${__pkey3__}C" = "${expected3}C"
  unset __pkey1__
  unset __pkey2__
  unset __pkey3__
}

can_create_variable_of_key_name_with_suffix_with_associated_value_for_each_dict_entry() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='__key1'
  local key2='__key2'
  local key3='__key3'
  local dict=$(dict_declare)
  dict="$(dict_set "${dict}" "${key1}" "${expected1}")"
  dict="$(dict_set "${dict}" "${key2}" "${expected2}")"
  dict="$(dict_set "${dict}" "${key3}" "${expected3}")"

  REQUIRE "$(dict_get "${dict}" "${key1}")A" = "${expected1}A"
  REQUIRE "$(dict_get "${dict}" "${key2}")B" = "${expected2}B"
  REQUIRE "$(dict_get "${dict}" "${key3}")C" = "${expected3}C"
  # Check we do not have variables defined already
  REQUIRE -z "${__key1s__:+x}"
  REQUIRE -z "${__key2s__:+x}"
  REQUIRE -z "${__key3s__:+x}"

  dict_for_each "${dict}" dict_op_to_var_flat "-" "s__"

  REQUIRE -n "${__key1s__:+x}"
  REQUIRE -n "${__key2s__:+x}"
  REQUIRE -n "${__key3s__:+x}"
  CHECK "${__key1s__}A" = "${expected1}A"
  CHECK "${__key2s__}B" = "${expected2}B"
  CHECK "${__key3s__}C" = "${expected3}C"
  unset __key1s__
  unset __key2s__
  unset __key3s__
}

test_dict_for_each_fn_called_count=0
test_dict_for_each_fn_actual=''
test_dict_for_each_fn_record_numbers=''
test_dict_for_each_fn_additional_parameters=''
test_dict_for_each_collect_call_data() {
  local key="${1}"
  local value="${2}"
  local record_number="${3}"
  shift 3
  test_dict_for_each_fn_actual="${key}${test_dict_for_each_fn_actual}${value}"
  test_dict_for_each_fn_called_count=$((${test_dict_for_each_fn_called_count}+1))
  test_dict_for_each_fn_additional_parameters="${test_dict_for_each_fn_additional_parameters} $@"
  test_dict_for_each_fn_record_numbers="${test_dict_for_each_fn_record_numbers}${record_number}"
}

iterating_over_empty_dict_does_not_call_operation_function() {
  test_dict_for_each_fn_called_count=0
  test_dict_for_each_fn_actual=''
  test_dict_for_each_fn_record_numbers=''
  dict_for_each $(dict_declare_simple) test_dict_for_each_collect_call_data
  CHECK "${test_dict_for_each_fn_called_count}" -eq 0
  CHECK -z "${test_dict_for_each_fn_actual}"
  CHECK -z "${test_dict_for_each_fn_record_numbers}"
}

iterating_over_single_entry_dict_calls_operation_function_once_with_key_and_value() {
  local value='value 1'
  local key='key1'
  local expected="${key}${value}"

  test_dict_for_each_fn_called_count=0
  test_dict_for_each_fn_actual=''
  test_dict_for_each_fn_record_numbers=''
  dict_for_each "$(dict_declare_simple "${key}" "${value}")" test_dict_for_each_collect_call_data
  CHECK "${test_dict_for_each_fn_called_count}" -eq 1
  CHECK "${test_dict_for_each_fn_actual}" = "${expected}"
  CHECK "${test_dict_for_each_fn_record_numbers}" = "1"
}

iterating_over_n_entry_dict_calls_operation_function_n_times_with_each_key_and_value() {
  local value1='value 1'
  local value1='value 2'
  local value1='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  local entry_count=3
  dict=$(dict_declare_simple "${key1}" "${value1}" \
                             "${key2}" "${value2}" "${key3}" "${value3}")
  local expected="${key3}${key2}${key1}${value1}${value2}${value3}"

  test_dict_for_each_fn_called_count=0
  test_dict_for_each_fn_actual=''
  test_dict_for_each_fn_record_numbers=''
  dict_for_each "${dict}" test_dict_for_each_collect_call_data
  CHECK "${test_dict_for_each_fn_called_count}" -eq "${entry_count}"
  CHECK "${test_dict_for_each_fn_actual}" = "${expected}"
  CHECK "${test_dict_for_each_fn_record_numbers}" = "123"
}

iterating_over_dict_calls_operation_function_passing_additional_parameters() {
  p1="one"
  p2="two"
  local expected=" ${p1} ${p2} ${p1} ${p2} ${p1} ${p2}"
  test_dict_for_each_fn_additional_parameters=''
  dict_for_each "$(dict_declare_simple "a" "1" "b" "2" "c" "3")" test_dict_for_each_collect_call_data "${p1}" "${p2}"
  CHECK "${test_dict_for_each_fn_additional_parameters}" = "${expected}"
}

iterating_over_dict_with_nested_dict_values_passes_correct_key_values() {
  local keyi11="keyi1"
  local keyi12="keyi2"
  local valuei11="value i 1 1"
  local valuei12="value i _ 2"
  local inner1="$(dict_declare_simple "${keyi11}" "${valuei11}" "${keyi12}" "${valuei12}")"
  local keyi21="keyi1"
  local keyi22="keyi2"
  local valuei21="value i 2 1"
  local valuei22="value i _ 2"
  local inner2="$(dict_declare_simple "${keyi21}" "${valuei21}" "${keyi22}" "${valuei22}")"

  local keym11="keym1"
  local keym12="keym2"
  local keym13="keym3"
  local valuem11="value m 1 1"
  local valuem13="value m _ _"
  local mid1="$(dict_declare "${keym11}" "${valuem11}" "${keym12}" "${inner1}" "${keym13}" "${valuem13}")"
  local keym21="keym1"
  local keym22="keym2"
  local keym23="keym3"
  local keym24="keym4"
  local valuem22="value m _ _"
  local valuem23="value m 2 3"
  local mid2="$(dict_declare "${keym21}" "${inner1}" "${keym22}" "${valuem22}" "${keym23}" "${valuem23}" "${keym24}"  "${inner2}")"

  local keyo1="keyo1"
  local keyo2="keyo2"
  local keyo3="keyo3"
  local keyo4="keyo4"
  local valueo1="value o one"
  local valueo4="value o four"
  local outer="$(dict_declare "${keyo1}"  "${valueo1}"  "${keyo2}" "${mid1}" "${keyo3}" "${mid2}" "${keyo4}"  "${valueo4}")"

  test_dict_for_each_fn_called_count=0
  test_dict_for_each_fn_actual=''
  local entry_count=4
  local expected="${keyo4}${keyo3}${keyo2}${keyo1}${valueo1}${mid1}${mid2}${valueo4}"

  dict_for_each "${outer}" test_dict_for_each_collect_call_data
  CHECK "${test_dict_for_each_fn_called_count}" -eq "${entry_count}"
  CHECK "${test_dict_for_each_fn_actual}" = "${expected}" | tr "${__DICT_GS__}${__DICT_RS__}${__DICT_US__}" '^_'
}

make_pretty_print_spec() {
echo "$(dict_declare_simple \
      "print_prefix" "P" "print_suffix" "Q" \
      "nesting_indent" "I" "nesting_prefix" "N" "nesting_suffix" "O" \
      "dict_prefix" "D" "dict_suffix" "E" \
      "record_separator" "T" "record_prefix" "R" "record_suffix" "S" \
      "key_prefix" "K" "key_suffix" "L" \
      "value_prefix" "V" "value_suffix" "W" \
    )"
}

make_json_pretty_print_spec() {
cat << EOF
$(dict_declare_simple \
      "print_prefix" "" "print_suffix" "${__TEST_NL__}" \
      "nesting_indent" "   " "nesting_prefix" "${__TEST_NL__}" "nesting_suffix" "" \
      "dict_prefix" "{${__TEST_NL__}" "dict_suffix" "${__TEST_NL__}}" \
      "record_separator" ",${__TEST_NL__}" "record_prefix" "   " "record_suffix" "" \
      "key_prefix" "\"" "key_suffix" "\" : " \
      "value_prefix" "\"" "value_suffix" "\"" \
    )
EOF
}

check_is_json() {
  local candidate="${1}"
  local ret
  ret=$(echo -n "${candidate}" | python -c "import sys,json;sys.tracebacklimit=0;json.loads(sys.stdin.read()) " 2>&1)
  ret="$?"
#  echo "@@@@@ json check of \""${candidate}"\" exitcode: \"${ret}\"" >&2
  if [ "${ret}" -eq 0 ]; then
    echo -n "true"
  else
    echo -n "false"
  fi
}

check_is_json_true_for_good_json() {
  local good_json="{ \"key\" : \"value\" }"
  local result="$(check_is_json "${good_json}")"
  CHECK "${result}"
}

check_is_json_false_for_bad_json() {
  local bad_json="{ \"key\" : \"value\" "
  local result="$(check_is_json "${bad_json}")"
  CHECK_FALSE "${result}"
}

can_pretty_print_empty_dict() {
  local expected='PDEQ'
  local actual="$(dict_pretty_print "$(dict_declare_simple)" "$(make_pretty_print_spec)")"
  CHECK "${actual}X" = "${expected}X"
}

pretty_printing_empty_dict_with_empty_print_spec_gives_empty_result() {
  local expected=''
  local actual="$(dict_pretty_print "$(dict_declare_simple)" "$(dict_declare_simple)")"
  CHECK "${actual}X" = "${expected}X"
}

can_pretty_print_simple_dict() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  dict=$(dict_declare_simple "${key1}" "${expected1}" \
                             "${key2}" "${expected2}" "${key3}" "${expected3}")

  local expected="PDRK${key1}LV${expected1}WSTRK${key2}LV${expected2}WSTRK${key3}LV${expected3}WSEQ"
  local actual="$(dict_pretty_print "${dict}" "$(make_pretty_print_spec)")"
  CHECK "${actual}X" = "${expected}X"
}

pretty_printing_simple_dict_with_empty_print_spec_gives_just_keys_and_values() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  dict=$(dict_declare_simple "${key1}" "${expected1}" \
                             "${key2}" "${expected2}" "${key3}" "${expected3}")

  local expected="${key1}${expected1}${key2}${expected2}${key3}${expected3}"
  local actual="$(dict_pretty_print "${dict}" "$(dict_declare_simple)")"
  CHECK "${actual}X" = "${expected}X"
}

can_json_pretty_print_simple_dict() {
  local expected1='value 1'
  local expected2='value 2'
  local expected3='value 3'
  local key1='key1'
  local key2='key2'
  local key3='key3'
  dict=$(dict_declare_simple "${key1}" "${expected1}" \
                             "${key2}" "${expected2}" "${key3}" "${expected3}") 
#dict_print_raw "$(make_json_pretty_print_spec)"
  local dict_prefix="$(dict_get "$(make_json_pretty_print_spec)" "dict_prefix"; echo "${__TEST_CR__}")"
  local json="$(dict_pretty_print "${dict}" "$(make_json_pretty_print_spec)")"
  local is_json="$(check_is_json "${json}")"
  CHECK "${is_json}"
}

make_nested_dict() {
  local keyi11="keyi1"
  local keyi12="keyi2"
  local valuei11="value i 1 1"
  local valuei12="value i _ 2"
  local inner1="$(dict_declare_simple "${keyi11}" "${valuei11}" "${keyi12}" "${valuei12}")"
  local keyi21="keyi1"
  local keyi22="keyi2"
  local valuei21="value i 2 1"
  local valuei22="value i _ 2"
  local inner2="$(dict_declare_simple "${keyi21}" "${valuei21}" "${keyi22}" "${valuei22}")"

  local keym11="keym1"
  local keym12="keym2"
  local keym13="keym3"
  local valuem11="value m 1 1"
  local valuem13="value m _ _"
  local mid1="$(dict_declare "${keym11}" "${valuem11}" "${keym12}" "${inner1}" "${keym13}" "${valuem13}")"
  local keym21="keym1"
  local keym22="keym2"
  local keym23="keym3"
  local keym24="keym4"
  local valuem22="value m _ _"
  local valuem23="value m 2 3"
  local mid2="$(dict_declare "${keym21}" "${inner1}" "${keym22}" "${valuem22}" "${keym23}" "${valuem23}" "${keym24}"  "${inner2}")"

  local keyo1="keyo1"
  local keyo2="keyo2"
  local keyo3="keyo3"
  local keyo4="keyo4"
  local valueo1="value o one"
  local valueo4="value o four"
  dict_declare "${keyo1}"  "${valueo1}"  "${keyo2}" "${mid1}" "${keyo3}" "${mid2}" "${keyo4}"  "${valueo4}"
}

can_pretty_print_nested_dict() {
  local keyi11="keyi1"
  local keyi12="keyi2"
  local valuei11="value i 1 1"
  local valuei12="value i _ 2"
  local keyi21="keyi1"
  local keyi22="keyi2"
  local valuei21="value i 2 1"
  local valuei22="value i _ 2"

  local keym11="keym1"
  local keym12="keym2"
  local keym13="keym3"
  local valuem11="value m 1 1"
  local valuem13="value m _ _"
  local keym21="keym1"
  local keym22="keym2"
  local keym23="keym3"
  local keym24="keym4"
  local valuem22="value m _ _"
  local valuem23="value m 2 3"
  local keyo1="keyo1"
  local keyo2="keyo2"
  local keyo3="keyo3"
  local keyo4="keyo4"
  local valueo1="value o one"
  local valueo4="value o four"
  dict="$(make_nested_dict)"
  actual="$(dict_pretty_print "${dict}" "$(make_pretty_print_spec)")"
  expected="PDRK${keyo1}LV${valueo1}WST"\
"RK${keyo2}LNDRK${keym11}LV${valuem11}WST"\
"RK${keym12}LNDRK${keyi11}LV${valuei11}WSTRK${keyi12}LV${valuei12}WSEOST"\
"RK${keym13}LV${valuem13}WSEOST"\
"RK${keyo3}LNDRK${keym21}LNDRK${keyi11}LV${valuei11}WSTRK${keyi12}LV${valuei12}WSEOST"\
"RK${keym22}LV${valuem22}WSTRK${keym23}LV${valuem23}WST"\
"RK${keym24}LNDRK${keyi21}LV${valuei21}WSTRK${keyi22}LV${valuei22}WSEOSEOST"\
"RK${keyo4}LV${valueo4}WSEQ"
  CHECK "${actual}X" = "${expected}X"
}

can_json_pretty_print_nested_dict() {
  dict="$(make_nested_dict)"
#dict_print_raw "$(make_json_pretty_print_spec)"
  local dict_prefix="$(dict_get "$(make_json_pretty_print_spec)" "dict_prefix"; echo "${__TEST_CR__}")"
  local json="$(dict_pretty_print "${dict}" "$(make_json_pretty_print_spec)")"
  local is_json="$(check_is_json "${json}")"
  CHECK "${is_json}"
}

#set -x
#TEST nested_dict_values_can_be_removed_correctly
#PRINT_TEST_COUNTS
#exit 0

TEST empty_string_is_not_a_dict
TEST arbitrary_string_is_not_a_dict
TEST declared_dict_variable_is_a_dict
TEST non_dict_variables_are_not_tolerated
TEST cannot_retrieve_values_from_empty_dict
TEST can_add_multiple_initial_values_on_dict_declaration
TEST can_add_multiple_initial_simple_values_only_on_dict_declaration
TEST cannot_set_duplicate_keys_in_dict_declaration
TEST can_set_keys_duplicated_in_part_in_dict_declaration
TEST can_retrieve_just_the_value_for_key_for_dict_containing_single_entry
TEST can_retrieve_just_the_values_for_keys_for_dict_containing_multiple_entries
TEST can_set_multilple_entries_in_single_call_dict_set_simple
TEST can_set_multilple_entries_in_single_call_dict_set
TEST can_retrieve_the_value_for_key_for_dict_containing_newlines
TEST can_update_values_of_previously_added_entries_using_dict_set
TEST can_update_values_of_previously_added_entries_using_dict_set_simple
TEST can_add_retrieve_values_with_keys_tails_of_other_keys
TEST can_add_retrieve_values_with_keys_heads_of_other_keys
TEST can_add_retrieve_values_with_keys_contained_in_other_keys
TEST can_add_and_retrieve_entries_correctly_with_key_values_within_values
TEST can_add_update_and_retrieve_entries_correctly_with_key_values_within_values
TEST can_remove_whole_entry_specified_by_key_from_dict
TEST iterating_over_empty_dict_does_not_call_operation_function
TEST iterating_over_single_entry_dict_calls_operation_function_once_with_key_and_value
TEST iterating_over_n_entry_dict_calls_operation_function_n_times_with_each_key_and_value
TEST iterating_over_dict_calls_operation_function_passing_additional_parameters
TEST added_nested_dict_values_can_be_retrieved_correctly
TEST initialised_nested_dict_values_can_be_retrieved_correctly
TEST nested_dict_values_can_be_removed_correctly
TEST iterating_over_dict_with_nested_dict_values_passes_correct_key_values
TEST can_create_variable_of_key_name_with_associated_value_for_each_dict_entry
TEST can_create_variable_of_key_name_with_prefix_and_suffix_with_associated_value_for_each_dict_entry
TEST can_create_variable_of_key_name_with_associated_nested_dict_value_for_each_dict_entry
TEST can_create_variable_of_key_name_with_prefix_with_associated_value_for_each_dict_entry
TEST can_create_variable_of_key_name_with_suffix_with_associated_value_for_each_dict_entry
TEST check_is_json_true_for_good_json
TEST check_is_json_false_for_bad_json
TEST can_pretty_print_empty_dict
TEST pretty_printing_empty_dict_with_empty_print_spec_gives_empty_result
TEST can_pretty_print_simple_dict
TEST pretty_printing_simple_dict_with_empty_print_spec_gives_just_keys_and_values
TEST can_json_pretty_print_simple_dict
TEST can_pretty_print_nested_dict
TEST can_json_pretty_print_nested_dict
PRINT_TEST_COUNTS

exit 0
